###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         29/Mar/2025  20:44:37 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\÷‹ø≠\Desktop\202206100085_÷‹ø≠            #
#                          zigbee\π§≥Ã‘¥¬Î_÷‹ø≠\Projects\zstack\Samples\Sampl #
#                          eApp\Source\Router2.c                              #
#    Command line       =  -f "C:\Users\÷‹ø≠\Desktop\202206100085_÷‹ø≠        #
#                          zigbee\π§≥Ã‘¥¬Î_÷‹ø≠\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cf #
#                          g" (-DCPU32MHZ -DROOT=__near_func                  #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                   #
#                          "C:\Users\÷‹ø≠\Desktop\202206100085_÷‹ø≠           #
#                          zigbee\π§≥Ã‘¥¬Î_÷‹ø≠\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cf #
#                          g" (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0   #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0x0085                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "C:\Users\÷‹ø≠\Desktop\2022 #
#                          06100085_÷‹ø≠ zigbee\π§≥Ã‘¥¬Î_÷‹ø≠\Projects\zstack #
#                          \Samples\SampleApp\Source\Router2.c" -D ZTOOL_P1   #
#                          -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D     #
#                          xLCD_SUPPORTED=DEBUG -lC                           #
#                          "C:\Users\÷‹ø≠\Desktop\202206100085_÷‹ø≠           #
#                          zigbee\π§≥Ã‘¥¬Î_÷‹ø≠\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\Router2EB\List\" -lA                 #
#                          "C:\Users\÷‹ø≠\Desktop\202206100085_÷‹ø≠           #
#                          zigbee\π§≥Ã‘¥¬Î_÷‹ø≠\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\Router2EB\List\" --diag_suppress     #
#                          Pe001,Pa010 -o "C:\Users\÷‹ø≠\Desktop\202206100085 #
#                          _÷‹ø≠ zigbee\π§≥Ã‘¥¬Î_÷‹ø≠\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\Router2EB\Obj\" -e             #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "C:\Users\÷‹ø≠\Desktop\202206100085_÷‹ø≠        #
#                          zigbee\π§≥Ã‘¥¬Î_÷‹ø≠\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\" -I "C:\Users\÷‹ø≠\Desktop\20220610 #
#                          0085_÷‹ø≠ zigbee\π§≥Ã‘¥¬Î_÷‹ø≠\Projects\zstack\Sam #
#                          ples\SampleApp\CC2530DB\..\Source\" -I             #
#                          "C:\Users\÷‹ø≠\Desktop\202206100085_÷‹ø≠           #
#                          zigbee\π§≥Ã‘¥¬Î_÷‹ø≠\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\..\..\..\ZMain\TI2530DB\" -I         #
#                          "C:\Users\÷‹ø≠\Desktop\202206100085_÷‹ø≠           #
#                          zigbee\π§≥Ã‘¥¬Î_÷‹ø≠\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\..\..\..\..\..\Components\hal\includ #
#                          e\" -I "C:\Users\÷‹ø≠\Desktop\202206100085_÷‹ø≠    #
#                          zigbee\π§≥Ã‘¥¬Î_÷‹ø≠\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\..\..\..\..\..\Components\hal\target #
#                          \CC2530EB\" -I "C:\Users\÷‹ø≠\Desktop\202206100085 #
#                          _÷‹ø≠ zigbee\π§≥Ã‘¥¬Î_÷‹ø≠\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\..\..\..\..\Components\mac\ #
#                          include\" -I "C:\Users\÷‹ø≠\Desktop\202206100085_÷ #
#                          ‹ø≠ zigbee\π§≥Ã‘¥¬Î_÷‹ø≠\Projects\zstack\Samples\S #
#                          ampleApp\CC2530DB\..\..\..\..\..\Components\mac\hi #
#                          gh_level\" -I "C:\Users\÷‹ø≠\Desktop\202206100085_ #
#                          ÷‹ø≠ zigbee\π§≥Ã‘¥¬Î_÷‹ø≠\Projects\zstack\Samples\ #
#                          SampleApp\CC2530DB\..\..\..\..\..\Components\mac\l #
#                          ow_level\srf04\" -I "C:\Users\÷‹ø≠\Desktop\2022061 #
#                          00085_÷‹ø≠ zigbee\π§≥Ã‘¥¬Î_÷‹ø≠\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\..\..\..\..\..\Components #
#                          \mac\low_level\srf04\single_chip\" -I              #
#                          "C:\Users\÷‹ø≠\Desktop\202206100085_÷‹ø≠           #
#                          zigbee\π§≥Ã‘¥¬Î_÷‹ø≠\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\..\..\..\..\..\Components\mt\" -I    #
#                          "C:\Users\÷‹ø≠\Desktop\202206100085_÷‹ø≠           #
#                          zigbee\π§≥Ã‘¥¬Î_÷‹ø≠\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\..\..\..\..\..\Components\osal\inclu #
#                          de\" -I "C:\Users\÷‹ø≠\Desktop\202206100085_÷‹ø≠   #
#                          zigbee\π§≥Ã‘¥¬Î_÷‹ø≠\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\..\..\..\..\..\Components\services\s #
#                          addr\" -I "C:\Users\÷‹ø≠\Desktop\202206100085_÷‹ø≠ #
#                           zigbee\π§≥Ã‘¥¬Î_÷‹ø≠\Projects\zstack\Samples\Samp #
#                          leApp\CC2530DB\..\..\..\..\..\Components\services\ #
#                          sdata\" -I "C:\Users\÷‹ø≠\Desktop\202206100085_÷‹ø #
#                          ≠ zigbee\π§≥Ã‘¥¬Î_÷‹ø≠\Projects\zstack\Samples\Sam #
#                          pleApp\CC2530DB\..\..\..\..\..\Components\stack\af #
#                          \" -I "C:\Users\÷‹ø≠\Desktop\202206100085_÷‹ø≠     #
#                          zigbee\π§≥Ã‘¥¬Î_÷‹ø≠\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\ #
#                          " -I "C:\Users\÷‹ø≠\Desktop\202206100085_÷‹ø≠      #
#                          zigbee\π§≥Ã‘¥¬Î_÷‹ø≠\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\..\..\..\..\..\Components\stack\sapi #
#                          \" -I "C:\Users\÷‹ø≠\Desktop\202206100085_÷‹ø≠     #
#                          zigbee\π§≥Ã‘¥¬Î_÷‹ø≠\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\..\..\..\..\..\Components\stack\sec\ #
#                          " -I "C:\Users\÷‹ø≠\Desktop\202206100085_÷‹ø≠      #
#                          zigbee\π§≥Ã‘¥¬Î_÷‹ø≠\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\..\..\..\..\..\Components\stack\sys\ #
#                          " -I "C:\Users\÷‹ø≠\Desktop\202206100085_÷‹ø≠      #
#                          zigbee\π§≥Ã‘¥¬Î_÷‹ø≠\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\ #
#                          " -I "C:\Users\÷‹ø≠\Desktop\202206100085_÷‹ø≠      #
#                          zigbee\π§≥Ã‘¥¬Î_÷‹ø≠\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\..\..\..\..\..\Components\zmac\" -I  #
#                          "C:\Users\÷‹ø≠\Desktop\202206100085_÷‹ø≠           #
#                          zigbee\π§≥Ã‘¥¬Î_÷‹ø≠\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\" #
#                           -Ohz --require_prototypes                         #
#    List file          =  C:\Users\÷‹ø≠\Desktop\202206100085_÷‹ø≠            #
#                          zigbee\π§≥Ã‘¥¬Î_÷‹ø≠\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\Router2EB\List\Router2.lst           #
#    Object file        =  C:\Users\÷‹ø≠\Desktop\202206100085_÷‹ø≠            #
#                          zigbee\π§≥Ã‘¥¬Î_÷‹ø≠\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\Router2EB\Obj\Router2.r51            #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\÷‹ø≠\Desktop\202206100085_÷‹ø≠ zigbee\π§≥Ã‘¥¬Î_÷‹ø≠\Projects\zstack\Samples\SampleApp\Source\Router2.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED ìAS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"

   \                                 In  segment SFR_AN, at 0xf4
   \   unsigned char volatile __sfr P1SEL
   \                     P1SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          #include "hal_board.h"
     75          /*********************************************************************
     76           * MACROS
     77           */
     78          
     79          /*********************************************************************
     80           * CONSTANTS
     81           */
     82          
     83          /*********************************************************************
     84           * TYPEDEFS
     85           */
     86          
     87          /*********************************************************************
     88           * GLOBAL VARIABLES
     89           */
     90          
     91          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     92          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
     93          {
     94            SAMPLEAPP_PERIODIC_CLUSTERID,
     95            SAMPLEAPP_FLASH_CLUSTERID
     96          };
     97          

   \                                 In  segment XDATA_ROM_C, align 1
     98          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
     99          {
    100            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    101            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    102            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    103            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    104            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    105            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    106            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    107            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    108            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    109          };
    110          
    111          // This is the Endpoint/Interface description.  It is defined here, but
    112          // filled-in in SampleApp_Init().  Another way to go would be to fill
    113          // in the structure here and make it a "const" (in code space).  The
    114          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    115          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    116          
    117          /*********************************************************************
    118           * EXTERNAL VARIABLES
    119           */
    120          
    121          /*********************************************************************
    122           * EXTERNAL FUNCTIONS
    123           */
    124          
    125          /*********************************************************************
    126           * LOCAL VARIABLES
    127           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    128          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    129                                    // This variable will be received when
    130                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    131          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    132          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    133          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    134          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    135          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    136          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    137          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    139          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    140          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    142          
    143          /*********************************************************************
    144           * LOCAL FUNCTIONS
    145           */
    146          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    147          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    148          void SampleApp_SendPeriodicMessage( void );
    149          void SampleApp_SendFlashMessage( uint16 flashTime );
    150          
    151          /*********************************************************************
    152           * NETWORK LAYER CALLBACKS
    153           */
    154          
    155          /*********************************************************************
    156           * PUBLIC FUNCTIONS
    157           */
    158          
    159          /*********************************************************************
    160           * @fn      SampleApp_Init
    161           *
    162           * @brief   Initialization function for the Generic App Task.
    163           *          This is called during initialization and should contain
    164           *          any application specific initialization (ie. hardware
    165           *          initialization/setup, table initialization, power up
    166           *          notificaiton ... ).
    167           *
    168           * @param   task_id - the ID assigned by OSAL.  This ID should be
    169           *                    used to send messages and set timers.
    170           *
    171           * @return  none
    172           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    173          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    174          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    175            SampleApp_TaskID = task_id;
   \   000006   90....       MOV     DPTR,#SampleApp_TaskID
   \   000009   F0           MOVX    @DPTR,A
    176            SampleApp_NwkState = DEV_INIT;
   \   00000A   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000D   7401         MOV     A,#0x1
   \   00000F   F0           MOVX    @DPTR,A
    177            SampleApp_TransID = 0;
   \   000010   90....       MOV     DPTR,#SampleApp_TransID
   \   000013   E4           CLR     A
   \   000014   F0           MOVX    @DPTR,A
    178            
    179            P1SEL &= ~0X03;   
   \   000015   53F4FC       ANL     0xf4,#0xfc
    180            P1DIR |= 0X03;
   \   000018   43FE03       ORL     0xfe,#0x3
    181            // Device hardware initialization can be added here or in main() (Zmain.c).
    182            // If the hardware is application specific - add it here.
    183            // If the hardware is other parts of the device add it in main().
    184          
    185           #if defined ( BUILD_ALL_DEVICES )
    186            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    187            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    188            // together - if they are - we will start up a coordinator. Otherwise,
    189            // the device will start as a router.
    190            if ( readCoordinatorJumper() )
    191              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    192            else
    193              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    194          #endif // BUILD_ALL_DEVICES
    195          
    196          #if defined ( HOLD_AUTO_START )
    197            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    198            //  from starting the device and wait for the application to
    199            //  start the device.
    200            ZDOInitDevice(0);
    201          #endif
    202          
    203            // Setup for the periodic message's destination address
    204            // Broadcast to everyone
    205            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00001B   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   00001E   740F         MOV     A,#0xf
   \   000020   F0           MOVX    @DPTR,A
    206            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000021   A3           INC     DPTR
   \   000022   7414         MOV     A,#0x14
   \   000024   F0           MOVX    @DPTR,A
    207            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   000025   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   000028   74FF         MOV     A,#-0x1
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   A3           INC     DPTR
   \   00002C   F0           MOVX    @DPTR,A
    208          
    209            // Setup for the flash command's destination address - Group 1
    210            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   00002D   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000030   7401         MOV     A,#0x1
   \   000032   F0           MOVX    @DPTR,A
    211            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000033   A3           INC     DPTR
   \   000034   7414         MOV     A,#0x14
   \   000036   F0           MOVX    @DPTR,A
    212            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   000037   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   00003A   7401         MOV     A,#0x1
   \   00003C   F0           MOVX    @DPTR,A
   \   00003D   A3           INC     DPTR
   \   00003E   E4           CLR     A
   \   00003F   F0           MOVX    @DPTR,A
    213          
    214            // Fill out the endpoint description.
    215            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   000040   90....       MOV     DPTR,#SampleApp_epDesc
   \   000043   7414         MOV     A,#0x14
   \   000045   F0           MOVX    @DPTR,A
    216            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000046   A3           INC     DPTR
   \   000047   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   000049   F0           MOVX    @DPTR,A
   \   00004A   A3           INC     DPTR
   \   00004B   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   00004D   F0           MOVX    @DPTR,A
    217            SampleApp_epDesc.simpleDesc
    218                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   00004E   A3           INC     DPTR
   \   00004F   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   000051   F0           MOVX    @DPTR,A
   \   000052   A3           INC     DPTR
   \   000053   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000055   F0           MOVX    @DPTR,A
    219            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   000056   A3           INC     DPTR
   \   000057   E4           CLR     A
   \   000058   F0           MOVX    @DPTR,A
    220          
    221            // Register the endpoint description with the AF
    222            afRegister( &SampleApp_epDesc );
   \   000059                ; Setup parameters for call to function afRegister
   \   000059   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   00005B   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   00005D   12....       LCALL   ??afRegister?relay
    223          
    224            // Register for all key events - This app will handle all key events
    225            RegisterForKeys( SampleApp_TaskID );
   \   000060                ; Setup parameters for call to function RegisterForKeys
   \   000060   90....       MOV     DPTR,#SampleApp_TaskID
   \   000063   E0           MOVX    A,@DPTR
   \   000064   F9           MOV     R1,A
   \   000065   12....       LCALL   ??RegisterForKeys?relay
    226          
    227            // By default, all devices start out in Group 1
    228            SampleApp_Group.ID = 0x0001;
   \   000068   12....       LCALL   ?Subroutine2 & 0xFFFF
    229            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );
   \                     ??CrossCallReturnLabel_0:
   \   00006B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00006E   7C07         MOV     R4,#0x7
   \   000070   7D00         MOV     R5,#0x0
   \   000072   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   000074   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   000076   12....       LCALL   ??osal_memcpy?relay
   \   000079   7403         MOV     A,#0x3
   \   00007B   12....       LCALL   ?DEALLOC_XSTACK8
    230            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   00007E                ; Setup parameters for call to function aps_AddGroup
   \   00007E   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   000080   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   000082   7914         MOV     R1,#0x14
   \   000084   12....       LCALL   ??aps_AddGroup?relay
    231          
    232          #if defined ( LCD_SUPPORTED )
    233            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
    234          #endif
    235          }
   \   000087                REQUIRE ?Subroutine0
   \   000087                REQUIRE P1SEL
   \   000087                REQUIRE P1DIR
   \   000087                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F03         MOV     R7,#0x3
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   90....       MOV     DPTR,#SampleApp_Group
   \   000003   7401         MOV     A,#0x1
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   E4           CLR     A
   \   000008   F0           MOVX    @DPTR,A
   \   000009                ; Setup parameters for call to function osal_memcpy
   \   000009                ; Setup parameters for call to function osal_memcpy
   \   000009                ; Setup parameters for call to function osal_memcpy
   \   000009   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   00000C   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   00000F   F5..         MOV     ?V0 + 2,A
   \   000011   78..         MOV     R0,#?V0 + 0
   \   000013   22           RET
    236          
    237          /*********************************************************************
    238           * @fn      SampleApp_ProcessEvent
    239           *
    240           * @brief   Generic Application Task event processor.  This function
    241           *          is called to process all events for the task.  Events
    242           *          include timers, messages and any other user defined events.
    243           *
    244           * @param   task_id  - The OSAL assigned task ID.
    245           * @param   events - events to process.  This is a bit map and can
    246           *                   contain more than one event.
    247           *
    248           * @return  none
    249           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    250          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    251          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    252            afIncomingMSGPacket_t *MSGpkt;
    253            (void)task_id;  // Intentionally unreferenced parameter
    254          
    255            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   606B         JZ      ??SampleApp_ProcessEvent_0
    256            {
    257              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   801D         SJMP    ??SampleApp_ProcessEvent_1
    258              while ( MSGpkt )
    259              {
    260                switch ( MSGpkt->hdr.event )
    261                {
    262                  // Received when a key is pressed
    263                  case KEY_CHANGE:
    264                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    265                    break;
    266          
    267                  // Received when a messages is received (OTA) for this endpoint
    268                  case AF_INCOMING_MSG_CMD:
    269                    SampleApp_MessageMSGCB( MSGpkt );
    270                    break;
    271          
    272                  // Received whenever the device changes state in the network
    273                  case ZDO_STATE_CHANGE:
    274                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   90....       MOV     DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX    @DPTR,A
    275                   
    276                      // Start sending the periodic message in a regular interval.
    277                      osal_start_timerEx( SampleApp_TaskID,
    278                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    279                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \   000015                ; Setup parameters for call to function osal_start_timerEx
   \   000015   7C88         MOV     R4,#-0x78
   \   000017   7D13         MOV     R5,#0x13
   \   000019   7A01         MOV     R2,#0x1
   \   00001B   7B00         MOV     R3,#0x0
   \   00001D   90....       MOV     DPTR,#SampleApp_TaskID
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F9           MOV     R1,A
   \   000022   12....       LCALL   ??osal_start_timerEx?relay
    280          
    281                    break;
    282          
    283                  default:
    284                    break;
    285                }
    286          
    287                // Release the memory
    288                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_3:
   \   000025                ; Setup parameters for call to function osal_msg_deallocate
   \   000025   AA..         MOV     R2,?V0 + 0
   \   000027   AB..         MOV     R3,?V0 + 1
   \   000029   12....       LCALL   ??osal_msg_deallocate?relay
    289          
    290                // Next - if one is available
    291                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00002C                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   00002C   90....       MOV     DPTR,#SampleApp_TaskID
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F9           MOV     R1,A
   \   000031   12....       LCALL   ??osal_msg_receive?relay
   \   000034   8A..         MOV     ?V0 + 0,R2
   \   000036   8B..         MOV     ?V0 + 1,R3
   \   000038   E5..         MOV     A,?V0 + 0
   \   00003A   45..         ORL     A,?V0 + 1
   \   00003C   6032         JZ      ??SampleApp_ProcessEvent_4
   \   00003E   85..82       MOV     DPL,?V0 + 0
   \   000041   85..83       MOV     DPH,?V0 + 1
   \   000044   E0           MOVX    A,@DPTR
   \   000045   24E6         ADD     A,#-0x1a
   \   000047   601E         JZ      ??SampleApp_ProcessEvent_5
   \   000049   245A         ADD     A,#0x5a
   \   00004B   6006         JZ      ??SampleApp_ProcessEvent_6
   \   00004D   24EF         ADD     A,#-0x11
   \   00004F   60BE         JZ      ??SampleApp_ProcessEvent_2
   \   000051   80D2         SJMP    ??SampleApp_ProcessEvent_3
   \                     ??SampleApp_ProcessEvent_6:
   \   000053                ; Setup parameters for call to function SampleApp_HandleKeys
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   E0           MOVX    A,@DPTR
   \   000057   FA           MOV     R2,A
   \   000058   85..82       MOV     DPL,?V0 + 0
   \   00005B   85..83       MOV     DPH,?V0 + 1
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   E0           MOVX    A,@DPTR
   \   000061   F9           MOV     R1,A
   \   000062   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   000065   80BE         SJMP    ??SampleApp_ProcessEvent_3
   \                     ??SampleApp_ProcessEvent_5:
   \   000067                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000067   AA..         MOV     R2,?V0 + 0
   \   000069   AB..         MOV     R3,?V0 + 1
   \   00006B   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   00006E   80B5         SJMP    ??SampleApp_ProcessEvent_3
    292              }
    293          
    294              // return unprocessed events
    295              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_4:
   \   000070   EE           MOV     A,R6
   \   000071   FA           MOV     R2,A
   \   000072   EF           MOV     A,R7
   \   000073   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_7:
   \   000075   FB           MOV     R3,A
   \   000076   8027         SJMP    ??SampleApp_ProcessEvent_8
    296            }
    297          
    298            // Send a message out - This event is generated by a timer
    299            //  (setup in SampleApp_Init()).
    300            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000078   EE           MOV     A,R6
   \   000079   A2E0         MOV     C,0xE0 /* A   */.0
   \   00007B   501E         JNC     ??SampleApp_ProcessEvent_9
    301            {
    302             
    303          
    304              // Setup to send message again in normal period (+ a little jitter)
    305              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    306                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   00007D                ; Setup parameters for call to function osal_rand
   \   00007D   12....       LCALL   ??osal_rand?relay
   \   000080                ; Setup parameters for call to function osal_start_timerEx
   \   000080   EA           MOV     A,R2
   \   000081   2488         ADD     A,#-0x78
   \   000083   FC           MOV     R4,A
   \   000084   E4           CLR     A
   \   000085   3413         ADDC    A,#0x13
   \   000087   FD           MOV     R5,A
   \   000088   7A01         MOV     R2,#0x1
   \   00008A   7B00         MOV     R3,#0x0
   \   00008C   90....       MOV     DPTR,#SampleApp_TaskID
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   F9           MOV     R1,A
   \   000091   12....       LCALL   ??osal_start_timerEx?relay
    307          
    308              // return unprocessed events
    309              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   000094   EE           MOV     A,R6
   \   000095   6401         XRL     A,#0x1
   \   000097   FA           MOV     R2,A
   \   000098   EF           MOV     A,R7
   \   000099   80DA         SJMP    ??SampleApp_ProcessEvent_7
    310            }
    311          
    312            // Discard unknown events
    313            return 0;
   \                     ??SampleApp_ProcessEvent_9:
   \   00009B   7A00         MOV     R2,#0x0
   \   00009D   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_8:
   \   00009F   7F04         MOV     R7,#0x4
   \   0000A1   02....       LJMP    ?BANKED_LEAVE_XDATA
    314          }
    315          
    316          /*********************************************************************
    317           * Event Generation Functions
    318           */
    319          /*********************************************************************
    320           * @fn      SampleApp_HandleKeys
    321           *
    322           * @brief   Handles all key events for this device.
    323           *
    324           * @param   shift - true if in shift/alt.
    325           * @param   keys - bit field for key events. Valid entries:
    326           *                 HAL_KEY_SW_2
    327           *                 HAL_KEY_SW_1
    328           *
    329           * @return  none
    330           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    331          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    332          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    333            (void)shift;  // Intentionally unreferenced parameter
    334            
    335            if ( keys & HAL_KEY_SW_1 )
   \   000007   A2E0         MOV     C,0xE0 /* A   */.0
   \   000009   5007         JNC     ??SampleApp_HandleKeys_0
    336            {
    337              /* This key sends the Flash Command is sent to Group 1.
    338               * This device will not receive the Flash Command from this
    339               * device (even if it belongs to group 1).
    340               */
    341              SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \   00000B                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   00000B   7AE8         MOV     R2,#-0x18
   \   00000D   7B03         MOV     R3,#0x3
   \   00000F   12....       LCALL   ??SampleApp_SendFlashMessage?relay
    342            }
    343          
    344            if ( keys & HAL_KEY_SW_2 )
   \                     ??SampleApp_HandleKeys_0:
   \   000012   EE           MOV     A,R6
   \   000013   A2E1         MOV     C,0xE0 /* A   */.1
   \   000015   5024         JNC     ??SampleApp_HandleKeys_1
    345            {
    346              /* The Flashr Command is sent to Group 1.
    347               * This key toggles this device in and out of group 1.
    348               * If this device doesn't belong to group 1, this application
    349               * will not receive the Flash command sent to group 1.
    350               */
    351              aps_Group_t *grp;
    352              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    353              if ( grp )
   \   000017                ; Setup parameters for call to function aps_FindGroup
   \   000017   7A01         MOV     R2,#0x1
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   7914         MOV     R1,#0x14
   \   00001D   12....       LCALL   ??aps_FindGroup?relay
   \   000020   8B..         MOV     ?V0 + 1,R3
   \   000022   EA           MOV     A,R2
   \   000023   45..         ORL     A,?V0 + 1
   \   000025   600B         JZ      ??SampleApp_HandleKeys_2
    354              {
    355                // Remove from the group
    356                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
   \   000027                ; Setup parameters for call to function aps_RemoveGroup
   \   000027   7A01         MOV     R2,#0x1
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   7914         MOV     R1,#0x14
   \   00002D   12....       LCALL   ??aps_RemoveGroup?relay
   \   000030   8009         SJMP    ??SampleApp_HandleKeys_1
    357              }
    358              else
    359              {
    360                // Add to the flash group
    361                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \                     ??SampleApp_HandleKeys_2:
   \   000032                ; Setup parameters for call to function aps_AddGroup
   \   000032   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   000034   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   000036   7914         MOV     R1,#0x14
   \   000038   12....       LCALL   ??aps_AddGroup?relay
    362              }
    363            }
    364            
    365            if ( keys & HAL_KEY_SW_6 )
   \                     ??SampleApp_HandleKeys_1:
   \   00003B   EE           MOV     A,R6
   \   00003C   A2E5         MOV     C,0xE0 /* A   */.5
   \   00003E   501E         JNC     ??CrossCallReturnLabel_5
    366            {
    367               SampleApp_Group.ID = 0x0001;//∂®“Â◊È∫≈
   \   000040   12....       LCALL   ?Subroutine2 & 0xFFFF
    368               osal_memcpy( SampleApp_Group.name, "Group 1", 7  );//∂®“Â◊È√˚
   \                     ??CrossCallReturnLabel_1:
   \   000043   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000046   7C07         MOV     R4,#0x7
   \   000048   7D00         MOV     R5,#0x0
   \   00004A   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   00004C   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   00004E   12....       LCALL   ??osal_memcpy?relay
   \   000051   7403         MOV     A,#0x3
   \   000053   12....       LCALL   ?DEALLOC_XSTACK8
    369               aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );//Œ™20∫≈∂Àµ„º”»Îµ⁄1◊È
   \   000056                ; Setup parameters for call to function aps_AddGroup
   \   000056   12....       LCALL   ?Subroutine3 & 0xFFFF
    370          
    371                 HalLedOnOff (HAL_LED_ALL, HAL_LED_MODE_OFF);
    372                 HalLedBlink (HAL_LED_1,5,50,1000);
    373                 HalLedOnOff (HAL_LED_ALL, HAL_LED_MODE_OFF);
    374            }
   \                     ??CrossCallReturnLabel_3:
   \   000059   7901         MOV     R1,#0x1
   \   00005B   12....       LCALL   ?Subroutine4 & 0xFFFF
    375             if ( keys & HAL_KEY_SW_7 )
   \                     ??CrossCallReturnLabel_5:
   \   00005E   EE           MOV     A,R6
   \   00005F   A2E6         MOV     C,0xE0 /* A   */.6
   \   000061   501E         JNC     ??CrossCallReturnLabel_6
    376            {
    377               SampleApp_Group.ID = 0x0001;//∂®“Â◊È∫≈
   \   000063   12....       LCALL   ?Subroutine2 & 0xFFFF
    378               osal_memcpy( SampleApp_Group.name, "Group 1", 7  );//∂®“Â◊È√˚
   \                     ??CrossCallReturnLabel_2:
   \   000066   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000069   7C07         MOV     R4,#0x7
   \   00006B   7D00         MOV     R5,#0x0
   \   00006D   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   00006F   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   000071   12....       LCALL   ??osal_memcpy?relay
   \   000074   7403         MOV     A,#0x3
   \   000076   12....       LCALL   ?DEALLOC_XSTACK8
    379               aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );//Œ™20∫≈∂Àµ„º”»Îµ⁄1◊È
   \   000079                ; Setup parameters for call to function aps_AddGroup
   \   000079   12....       LCALL   ?Subroutine3 & 0xFFFF
    380          
    381                 HalLedOnOff (HAL_LED_ALL, HAL_LED_MODE_OFF);
    382                 HalLedBlink (HAL_LED_2,5,50,1000);
    383                 HalLedOnOff (HAL_LED_ALL, HAL_LED_MODE_OFF);
    384             }
   \                     ??CrossCallReturnLabel_4:
   \   00007C   7902         MOV     R1,#0x2
   \   00007E   12....       LCALL   ?Subroutine4 & 0xFFFF
    385          }
   \                     ??CrossCallReturnLabel_6:
   \   000081   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ??HalLedBlink?relay
   \   000003                ; Setup parameters for call to function HalLedOnOff
   \   000003                ; Setup parameters for call to function HalLedOnOff
   \   000003   7A00         MOV     R2,#0x0
   \   000005   790F         MOV     R1,#0xf
   \   000007   12....       LCALL   ??HalLedOnOff?relay
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   000002   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   000004   7914         MOV     R1,#0x14
   \   000006   12....       LCALL   ??aps_AddGroup?relay
   \   000009                ; Setup parameters for call to function HalLedOnOff
   \   000009                ; Setup parameters for call to function HalLedOnOff
   \   000009   7A00         MOV     R2,#0x0
   \   00000B   790F         MOV     R1,#0xf
   \   00000D   12....       LCALL   ??HalLedOnOff?relay
   \   000010                ; Setup parameters for call to function HalLedBlink
   \   000010                ; Setup parameters for call to function HalLedBlink
   \   000010   7CE8         MOV     R4,#-0x18
   \   000012   7D03         MOV     R5,#0x3
   \   000014   7B32         MOV     R3,#0x32
   \   000016   7A05         MOV     R2,#0x5
   \   000018   22           RET
    386          /*********************************************************************
    387           * LOCAL FUNCTIONS
    388           */
    389          
    390          /*********************************************************************
    391           * @fn      SampleApp_MessageMSGCB
    392           *
    393           * @brief   Data message processor callback.  This function processes
    394           *          any incoming data - probably from other devices.  So, based
    395           *          on cluster ID, perform the intended action.
    396           *
    397           * @param   none
    398           *
    399           * @return  none
    400           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    401          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    402          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    403            uint16 flashTime;
                          ^
Warning[Pe177]: variable "flashTime" was declared but never referenced
    404          
    405            switch ( pkt->clusterId )
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6402         XRL     A,#0x2
   \   00000F   7002         JNZ     ??SampleApp_MessageMSGCB_0
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \                     ??SampleApp_MessageMSGCB_0:
   \   000013   7030         JNZ     ??SampleApp_MessageMSGCB_1
    406            {
    407              case SAMPLEAPP_PERIODIC_CLUSTERID:
    408               
    409                break;
    410          
    411              case SAMPLEAPP_FLASH_CLUSTERID:
    412                //flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    413                //HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
    414                HalUARTWrite(0, pkt->cmd.Data,pkt->cmd.DataLength);
   \   000015                ; Setup parameters for call to function HalUARTWrite
   \   000015   EA           MOV     A,R2
   \   000016   2420         ADD     A,#0x20
   \   000018   F582         MOV     DPL,A
   \   00001A   EB           MOV     A,R3
   \   00001B   3400         ADDC    A,#0x0
   \   00001D   F583         MOV     DPH,A
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   FC           MOV     R4,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FD           MOV     R5,A
   \   000024   EA           MOV     A,R2
   \   000025   2422         ADD     A,#0x22
   \   000027   F582         MOV     DPL,A
   \   000029   EB           MOV     A,R3
   \   00002A   3400         ADDC    A,#0x0
   \   00002C   F583         MOV     DPH,A
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   FA           MOV     R2,A
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   FB           MOV     R3,A
   \   000033   7900         MOV     R1,#0x0
   \   000035   12....       LCALL   ??HalUARTWrite?relay
    415                HalUARTWrite(0,"\n",1 );
   \   000038                ; Setup parameters for call to function HalUARTWrite
   \   000038   7C01         MOV     R4,#0x1
   \   00003A   7D00         MOV     R5,#0x0
   \   00003C   7A..         MOV     R2,#`?<Constant "\\n">` & 0xff
   \   00003E   7B..         MOV     R3,#(`?<Constant "\\n">` >> 8) & 0xff
   \   000040   7900         MOV     R1,#0x0
   \   000042   12....       LCALL   ??HalUARTWrite?relay
    416                break;
    417            }
    418          }
   \                     ??SampleApp_MessageMSGCB_1:
   \   000045   D083         POP     DPH
   \   000047   D082         POP     DPL
   \   000049   02....       LJMP    ?BRET
    419          
    420          /*********************************************************************
    421           * @fn      SampleApp_SendPeriodicMessage
    422           *
    423           * @brief   Send the periodic message.
    424           *
    425           * @param   none
    426           *
    427           * @return  none
    428           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    429          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    430          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    431            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    432                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    433                                 1,
    434                                 (uint8*)&SampleAppPeriodicCounter,
    435                                 &SampleApp_TransID,
    436                                 AF_DISCV_ROUTE,
    437                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000005                ; Setup parameters for call to function AF_DataRequest
   \   000005   75..1E       MOV     ?V0 + 0,#0x1e
   \   000008   78..         MOV     R0,#?V0 + 0
   \   00000A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00000D   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000010   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000018   75....       MOV     ?V0 + 0,#SampleAppPeriodicCounter & 0xff
   \   00001B   75....       MOV     ?V0 + 1,#(SampleAppPeriodicCounter >> 8) & 0xff
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..01       MOV     ?V0 + 0,#0x1
   \   000026   75..00       MOV     ?V0 + 1,#0x0
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   78..         MOV     R0,#?V0 + 0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   7920         MOV     R1,#0x20
   \   000035   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000037   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000039   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   00003B   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00003D   12....       LCALL   ??AF_DataRequest?relay
   \   000040   7409         MOV     A,#0x9
   \   000042                REQUIRE ?Subroutine1
   \   000042                ; // Fall through to label ?Subroutine1
    438            {
    439            }
    440            else
    441            {
    442              // Error occurred in request to send.
    443            }
    444          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F02         MOV     R7,#0x2
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
    445          
    446          /*********************************************************************
    447           * @fn      SampleApp_SendFlashMessage
    448           *
    449           * @brief   Send the flash message to group 1.
    450           *
    451           * @param   flashTime - in milliseconds
    452           *
    453           * @return  none
    454           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    455          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    456          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    457            uint8 buffer[3];
    458            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    459            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    460            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   F0           MOVX    @DPTR,A
    461          
    462            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    463                                 SAMPLEAPP_FLASH_CLUSTERID,
    464                                 3,
    465                                 buffer,
    466                                 &SampleApp_TransID,
    467                                 AF_DISCV_ROUTE,
    468                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..1E       MOV     ?V0 + 0,#0x1e
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000034   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   8582..       MOV     ?V0 + 0,DPL
   \   000044   8583..       MOV     ?V0 + 1,DPH
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   75..03       MOV     ?V0 + 0,#0x3
   \   00004F   75..00       MOV     ?V0 + 1,#0x0
   \   000052   78..         MOV     R0,#?V0 + 0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   75..02       MOV     ?V0 + 0,#0x2
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   7920         MOV     R1,#0x20
   \   000061   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000063   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000065   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   000067   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000069   12....       LCALL   ??AF_DataRequest?relay
   \   00006C   7409         MOV     A,#0x9
   \   00006E   12....       LCALL   ?DEALLOC_XSTACK8
    469            {
    470            }
    471            else
    472            {
    473              // Error occurred in request to send.
    474            }
    475          }
   \   000071   7403         MOV     A,#0x3
   \   000073   80..         SJMP    ?Subroutine1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\n">`:
   \   000000   0A00         DB "\012"
    476          
    477          /*********************************************************************
    478          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     SampleApp_HandleKeys               0      0     26
       -> SampleApp_SendFlashMessage
                                        0      0     22
       -> aps_FindGroup                 0      0     22
       -> aps_RemoveGroup               0      0     22
       -> aps_AddGroup                  0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> HalLedOnOff                   0      0     22
       -> HalLedBlink                   0      0     22
       -> HalLedOnOff                   0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> HalLedOnOff                   0      0     22
       -> HalLedBlink                   0      0     22
       -> HalLedOnOff                   0      0     22
     SampleApp_Init                     0      0     14
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
     SampleApp_MessageMSGCB             2      0     12
       -> HalUARTWrite                  4      0      0
       -> HalUARTWrite                  4      0      0
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24
     SampleApp_SendFlashMessage         1      0     33
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      0      0     19
       -> AF_DataRequest                0      0     38


   Segment part sizes:

     Function/Label                        Bytes
     --------------                        -----
     P1SEL                                    1
     P1DIR                                    1
     SampleApp_ClusterList                    4
     SampleApp_SimpleDesc                    12
     SampleApp_epDesc                         6
     SampleApp_TaskID                         1
     SampleApp_NwkState                       1
     SampleApp_TransID                        1
     SampleApp_Periodic_DstAddr              12
     SampleApp_Flash_DstAddr                 12
     SampleApp_Group                         18
     SampleAppPeriodicCounter                 1
     SampleAppFlashCounter                    1
     SampleApp_Init                         135
     ?Subroutine0                             5
     ?Subroutine2                            20
     SampleApp_ProcessEvent                 164
     SampleApp_HandleKeys                   132
     ?Subroutine4                            11
     ?Subroutine3                            25
     SampleApp_MessageMSGCB                  76
     SampleApp_SendPeriodicMessage           66
     ?Subroutine1                             8
     SampleApp_SendFlashMessage             117
     ??SampleApp_Init?relay                   6
     ??SampleApp_ProcessEvent?relay           6
     ??SampleApp_HandleKeys?relay             6
     ??SampleApp_MessageMSGCB?relay           6
     ??SampleApp_SendPeriodicMessage?relay    6
     ??SampleApp_SendFlashMessage?relay       6
     ?<Constant "Group 1">                    8
     ?<Constant "\n">                         2

 
 759 bytes in segment BANKED_CODE
  36 bytes in segment BANK_RELAYS
   2 bytes in segment SFR_AN
  26 bytes in segment XDATA_ROM_C
  53 bytes in segment XDATA_Z
 
 795 bytes of CODE  memory
  26 bytes of CONST memory
   0 bytes of DATA  memory (+ 2 bytes shared)
  53 bytes of XDATA memory

Errors: none
Warnings: 1
