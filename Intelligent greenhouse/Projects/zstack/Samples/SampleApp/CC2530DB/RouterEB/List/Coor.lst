###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         28/Oct/2024  10:58:25 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\win10_1\Desktop\ÊµÑéÈý ´®¿Ú»úÖÆ\ÊµÑéÈý    #
#                          ´®¿Ú»úÖÆ\ZStack-CC2530-2.5.1a\Projects\zstack\Samp #
#                          les\SampleApp\Source\Coor.c                        #
#    Command line       =  -f "C:\Users\win10_1\Desktop\ÊµÑéÈý                #
#                          ´®¿Ú»úÖÆ\ÊµÑéÈý ´®¿Ú»úÖÆ\ZStack-CC2530-2.5.1a\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\To #
#                          ols\CC2530DB\f8wRouter.cfg" (-DCPU32MHZ            #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                   #
#                          "C:\Users\win10_1\Desktop\ÊµÑéÈý ´®¿Ú»úÖÆ\ÊµÑéÈý   #
#                          ´®¿Ú»úÖÆ\ZStack-CC2530-2.5.1a\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8w #
#                          Config.cfg" (-DZIGBEEPRO -DSECURE=0                #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "C:\Users\win10_1\Desktop\Ê #
#                          µÑéÈý ´®¿Ú»úÖÆ\ÊµÑéÈý ´®¿Ú»úÖÆ\ZStack-CC2530-2.5.1 #
#                          a\Projects\zstack\Samples\SampleApp\Source\Coor.c" #
#                           -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D          #
#                          MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC             #
#                          "C:\Users\win10_1\Desktop\ÊµÑéÈý ´®¿Ú»úÖÆ\ÊµÑéÈý   #
#                          ´®¿Ú»úÖÆ\ZStack-CC2530-2.5.1a\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\RouterEB\List\" -lA         #
#                          "C:\Users\win10_1\Desktop\ÊµÑéÈý ´®¿Ú»úÖÆ\ÊµÑéÈý   #
#                          ´®¿Ú»úÖÆ\ZStack-CC2530-2.5.1a\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\RouterEB\List\"             #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          "C:\Users\win10_1\Desktop\ÊµÑéÈý ´®¿Ú»úÖÆ\ÊµÑéÈý   #
#                          ´®¿Ú»úÖÆ\ZStack-CC2530-2.5.1a\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\RouterEB\Obj\" -e           #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "C:\Users\win10_1\Desktop\ÊµÑéÈý                #
#                          ´®¿Ú»úÖÆ\ÊµÑéÈý ´®¿Ú»úÖÆ\ZStack-CC2530-2.5.1a\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\" -I        #
#                          "C:\Users\win10_1\Desktop\ÊµÑéÈý ´®¿Ú»úÖÆ\ÊµÑéÈý   #
#                          ´®¿Ú»úÖÆ\ZStack-CC2530-2.5.1a\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\Source\" -I              #
#                          "C:\Users\win10_1\Desktop\ÊµÑéÈý ´®¿Ú»úÖÆ\ÊµÑéÈý   #
#                          ´®¿Ú»úÖÆ\ZStack-CC2530-2.5.1a\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\"   #
#                          -I "C:\Users\win10_1\Desktop\ÊµÑéÈý                #
#                          ´®¿Ú»úÖÆ\ÊµÑéÈý ´®¿Ú»úÖÆ\ZStack-CC2530-2.5.1a\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\Components\hal\include\" -I                    #
#                          "C:\Users\win10_1\Desktop\ÊµÑéÈý ´®¿Ú»úÖÆ\ÊµÑéÈý   #
#                          ´®¿Ú»úÖÆ\ZStack-CC2530-2.5.1a\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\..\..\Components\h #
#                          al\target\CC2530EB\" -I "C:\Users\win10_1\Desktop\ #
#                          ÊµÑéÈý ´®¿Ú»úÖÆ\ÊµÑéÈý ´®¿Ú»úÖÆ\ZStack-CC2530-2.5. #
#                          1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\mac\include\" -I             #
#                          "C:\Users\win10_1\Desktop\ÊµÑéÈý ´®¿Ú»úÖÆ\ÊµÑéÈý   #
#                          ´®¿Ú»úÖÆ\ZStack-CC2530-2.5.1a\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\..\..\Components\m #
#                          ac\high_level\" -I "C:\Users\win10_1\Desktop\ÊµÑéÈ #
#                          ý ´®¿Ú»úÖÆ\ÊµÑéÈý ´®¿Ú»úÖÆ\ZStack-CC2530-2.5.1a\Pr #
#                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\mac\low_level\srf04\" -I          #
#                          "C:\Users\win10_1\Desktop\ÊµÑéÈý ´®¿Ú»úÖÆ\ÊµÑéÈý   #
#                          ´®¿Ú»úÖÆ\ZStack-CC2530-2.5.1a\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\..\..\Components\m #
#                          ac\low_level\srf04\single_chip\" -I                #
#                          "C:\Users\win10_1\Desktop\ÊµÑéÈý ´®¿Ú»úÖÆ\ÊµÑéÈý   #
#                          ´®¿Ú»úÖÆ\ZStack-CC2530-2.5.1a\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\..\..\Components\m #
#                          t\" -I "C:\Users\win10_1\Desktop\ÊµÑéÈý            #
#                          ´®¿Ú»úÖÆ\ÊµÑéÈý ´®¿Ú»úÖÆ\ZStack-CC2530-2.5.1a\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\Components\osal\include\" -I                   #
#                          "C:\Users\win10_1\Desktop\ÊµÑéÈý ´®¿Ú»úÖÆ\ÊµÑéÈý   #
#                          ´®¿Ú»úÖÆ\ZStack-CC2530-2.5.1a\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\..\..\Components\s #
#                          ervices\saddr\" -I "C:\Users\win10_1\Desktop\ÊµÑéÈ #
#                          ý ´®¿Ú»úÖÆ\ÊµÑéÈý ´®¿Ú»úÖÆ\ZStack-CC2530-2.5.1a\Pr #
#                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\services\sdata\" -I               #
#                          "C:\Users\win10_1\Desktop\ÊµÑéÈý ´®¿Ú»úÖÆ\ÊµÑéÈý   #
#                          ´®¿Ú»úÖÆ\ZStack-CC2530-2.5.1a\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\..\..\Components\s #
#                          tack\af\" -I "C:\Users\win10_1\Desktop\ÊµÑéÈý      #
#                          ´®¿Ú»úÖÆ\ÊµÑéÈý ´®¿Ú»úÖÆ\ZStack-CC2530-2.5.1a\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\nwk\" -I                      #
#                          "C:\Users\win10_1\Desktop\ÊµÑéÈý ´®¿Ú»úÖÆ\ÊµÑéÈý   #
#                          ´®¿Ú»úÖÆ\ZStack-CC2530-2.5.1a\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\..\..\Components\s #
#                          tack\sapi\" -I "C:\Users\win10_1\Desktop\ÊµÑéÈý    #
#                          ´®¿Ú»úÖÆ\ÊµÑéÈý ´®¿Ú»úÖÆ\ZStack-CC2530-2.5.1a\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\sec\" -I                      #
#                          "C:\Users\win10_1\Desktop\ÊµÑéÈý ´®¿Ú»úÖÆ\ÊµÑéÈý   #
#                          ´®¿Ú»úÖÆ\ZStack-CC2530-2.5.1a\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\..\..\Components\s #
#                          tack\sys\" -I "C:\Users\win10_1\Desktop\ÊµÑéÈý     #
#                          ´®¿Ú»úÖÆ\ÊµÑéÈý ´®¿Ú»úÖÆ\ZStack-CC2530-2.5.1a\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\zdo\" -I                      #
#                          "C:\Users\win10_1\Desktop\ÊµÑéÈý ´®¿Ú»úÖÆ\ÊµÑéÈý   #
#                          ´®¿Ú»úÖÆ\ZStack-CC2530-2.5.1a\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\..\..\Components\z #
#                          mac\" -I "C:\Users\win10_1\Desktop\ÊµÑéÈý          #
#                          ´®¿Ú»úÖÆ\ÊµÑéÈý ´®¿Ú»úÖÆ\ZStack-CC2530-2.5.1a\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\Components\zmac\f8w\" -Ohz                     #
#                          --require_prototypes                               #
#    List file          =  C:\Users\win10_1\Desktop\ÊµÑéÈý ´®¿Ú»úÖÆ\ÊµÑéÈý    #
#                          ´®¿Ú»úÖÆ\ZStack-CC2530-2.5.1a\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\RouterEB\List\Coor.lst      #
#    Object file        =  C:\Users\win10_1\Desktop\ÊµÑéÈý ´®¿Ú»úÖÆ\ÊµÑéÈý    #
#                          ´®¿Ú»úÖÆ\ZStack-CC2530-2.5.1a\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\RouterEB\Obj\Coor.r51       #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\win10_1\Desktop\ÊµÑéÈý ´®¿Ú»úÖÆ\ÊµÑéÈý ´®¿Ú»úÖÆ\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SampleApp\Source\Coor.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"

   \                                 In  segment SFR_AN, at 0xf4
   \   unsigned char volatile __sfr P1SEL
   \                     P1SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          #include "MT_UART.h"
     75          #include "MT.h"
     76          /*********************************************************************
     77           * MACROS
     78           */
     79          
     80          /*********************************************************************
     81           * CONSTANTS
     82           */
     83          
     84          /*********************************************************************
     85           * TYPEDEFS
     86           */
     87          
     88          /*********************************************************************
     89           * GLOBAL VARIABLES
     90           */
     91          
     92          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     93          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
     94          {
     95            SAMPLEAPP_PERIODIC_CLUSTERID,
     96            SAMPLEAPP_FLASH_CLUSTERID
     97          };
     98          

   \                                 In  segment XDATA_ROM_C, align 1
     99          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
    100          {
    101            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    102            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    103            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    104            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    105            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    106            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    107            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    108            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    109            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    110          };
    111          
    112          // This is the Endpoint/Interface description.  It is defined here, but
    113          // filled-in in SampleApp_Init().  Another way to go would be to fill
    114          // in the structure here and make it a "const" (in code space).  The
    115          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    116          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    117          
    118          /*********************************************************************
    119           * EXTERNAL VARIABLES
    120           */
    121          
    122          /*********************************************************************
    123           * EXTERNAL FUNCTIONS
    124           */
    125          
    126          /*********************************************************************
    127           * LOCAL VARIABLES
    128           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    129          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    130                                    // This variable will be received when
    131                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    132          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    133          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    134          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    135          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    136          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    137          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    138          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    139          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    140          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    143          
    144          /*********************************************************************
    145           * LOCAL FUNCTIONS
    146           */
    147          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    148          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    149          void SampleApp_SendPeriodicMessage( void );
    150          void SampleApp_SendFlashMessage( uint16 flashTime );
    151          
    152          /*********************************************************************
    153           * NETWORK LAYER CALLBACKS
    154           */
    155          
    156          /*********************************************************************
    157           * PUBLIC FUNCTIONS
    158           */
    159          
    160          /*********************************************************************
    161           * @fn      SampleApp_Init
    162           *
    163           * @brief   Initialization function for the Generic App Task.
    164           *          This is called during initialization and should contain
    165           *          any application specific initialization (ie. hardware
    166           *          initialization/setup, table initialization, power up
    167           *          notificaiton ... ).
    168           *
    169           * @param   task_id - the ID assigned by OSAL.  This ID should be
    170           *                    used to send messages and set timers.
    171           *
    172           * @return  none
    173           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    174          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    175          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    176            SampleApp_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    177            SampleApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    178            SampleApp_TransID = 0;
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    179            
    180            P1SEL &= ~0X03;   
   \   000016   53F4FC       ANL     0xf4,#0xfc
    181            P1DIR |= 0X03;
   \   000019   43FE03       ORL     0xfe,#0x3
    182            // Device hardware initialization can be added here or in main() (Zmain.c).
    183            // If the hardware is application specific - add it here.
    184            // If the hardware is other parts of the device add it in main().
    185            MT_UartInit();  //´®¿Ú³õÊ¼»¯
   \   00001C                ; Setup parameters for call to function MT_UartInit
   \   00001C   12....       LCALL   ??MT_UartInit?relay
    186            MT_UartRegisterTaskID(task_id); //ÀûÓÃÓï¾äApp_TaskID = taskID½«UART×¢²áÔÚÓ¦ÓÃ²ãÉÏ£¬Èô·¢Éú´®¿ÚÊÂ¼þ£¬Ôò
   \   00001F                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   00001F   EE           MOV     A,R6
   \   000020   F9           MOV     R1,A
   \   000021   12....       LCALL   ??MT_UartRegisterTaskID?relay
    187          //ÔÚÓ¦ÓÃ²ãÉÏ´¦Àí£¬ÔÚºóÃæµÄµÚ17²½Ö´ÐÐº¯ÊýMT_UartProcessZToolData»áÓÃµ½
    188            
    189            
    190            
    191           #if defined ( BUILD_ALL_DEVICES )
    192            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    193            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    194            // together - if they are - we will start up a coordinator. Otherwise,
    195            // the device will start as a router.
    196            if ( readCoordinatorJumper() )
    197              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    198            else
    199              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    200          #endif // BUILD_ALL_DEVICES
    201          
    202          #if defined ( HOLD_AUTO_START )
    203            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    204            //  from starting the device and wait for the application to
    205            //  start the device.
    206            ZDOInitDevice(0);
    207          #endif
    208          
    209            // Setup for the periodic message's destination address
    210            // Broadcast to everyone
    211            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000024   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000027   740F         MOV     A,#0xf
   \   000029   F0           MOVX    @DPTR,A
    212            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00002A   A3           INC     DPTR
   \   00002B   7414         MOV     A,#0x14
   \   00002D   F0           MOVX    @DPTR,A
    213            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   00002E   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   000031   74FF         MOV     A,#-0x1
   \   000033   F0           MOVX    @DPTR,A
   \   000034   A3           INC     DPTR
   \   000035   F0           MOVX    @DPTR,A
    214          
    215            // Setup for the flash command's destination address - Group 1
    216            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000036   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000039   7401         MOV     A,#0x1
   \   00003B   F0           MOVX    @DPTR,A
    217            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00003C   A3           INC     DPTR
   \   00003D   7414         MOV     A,#0x14
   \   00003F   F0           MOVX    @DPTR,A
    218            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   000040   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   000043   7401         MOV     A,#0x1
   \   000045   F0           MOVX    @DPTR,A
   \   000046   A3           INC     DPTR
   \   000047   E4           CLR     A
   \   000048   F0           MOVX    @DPTR,A
    219          
    220            // Fill out the endpoint description.
    221            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   000049   90....       MOV     DPTR,#SampleApp_epDesc
   \   00004C   7414         MOV     A,#0x14
   \   00004E   F0           MOVX    @DPTR,A
    222            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   00004F   A3           INC     DPTR
   \   000050   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   000052   F0           MOVX    @DPTR,A
   \   000053   A3           INC     DPTR
   \   000054   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   000056   F0           MOVX    @DPTR,A
    223            SampleApp_epDesc.simpleDesc
    224                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   000057   A3           INC     DPTR
   \   000058   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   00005A   F0           MOVX    @DPTR,A
   \   00005B   A3           INC     DPTR
   \   00005C   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   00005E   F0           MOVX    @DPTR,A
    225            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   00005F   A3           INC     DPTR
   \   000060   E4           CLR     A
   \   000061   F0           MOVX    @DPTR,A
    226          
    227            // Register the endpoint description with the AF
    228            afRegister( &SampleApp_epDesc );
   \   000062                ; Setup parameters for call to function afRegister
   \   000062   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   000064   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   000066   12....       LCALL   ??afRegister?relay
    229          
    230            // Register for all key events - This app will handle all key events
    231            RegisterForKeys( SampleApp_TaskID );
   \   000069                ; Setup parameters for call to function RegisterForKeys
   \   000069   90....       MOV     DPTR,#SampleApp_TaskID
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   F9           MOV     R1,A
   \   00006E   12....       LCALL   ??RegisterForKeys?relay
    232          
    233            // By default, all devices start out in Group 1
    234            SampleApp_Group.ID = 0x0001;
   \   000071   90....       MOV     DPTR,#SampleApp_Group
   \   000074   7401         MOV     A,#0x1
   \   000076   F0           MOVX    @DPTR,A
   \   000077   A3           INC     DPTR
   \   000078   E4           CLR     A
   \   000079   F0           MOVX    @DPTR,A
    235            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );
   \   00007A                ; Setup parameters for call to function osal_memcpy
   \   00007A   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   00007D   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   000080   F5..         MOV     ?V0 + 2,A
   \   000082   78..         MOV     R0,#?V0 + 0
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000087   7C07         MOV     R4,#0x7
   \   000089   7D00         MOV     R5,#0x0
   \   00008B   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   00008D   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   00008F   12....       LCALL   ??osal_memcpy?relay
   \   000092   7403         MOV     A,#0x3
   \   000094   12....       LCALL   ?DEALLOC_XSTACK8
    236            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   000097                ; Setup parameters for call to function aps_AddGroup
   \   000097   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   000099   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   00009B   7914         MOV     R1,#0x14
   \   00009D   12....       LCALL   ??aps_AddGroup?relay
    237          
    238          #if defined ( LCD_SUPPORTED )
    239            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
   \   0000A0                ; Setup parameters for call to function HalLcdWriteString
   \   0000A0   7901         MOV     R1,#0x1
   \   0000A2   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   0000A4   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000A6   12....       LCALL   ??HalLcdWriteString?relay
    240          #endif
    241          }
   \   0000A9   7F03         MOV     R7,#0x3
   \   0000AB   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000AE                REQUIRE P1SEL
   \   0000AE                REQUIRE P1DIR
    242          
    243          /*********************************************************************
    244           * @fn      SampleApp_ProcessEvent
    245           *
    246           * @brief   Generic Application Task event processor.  This function
    247           *          is called to process all events for the task.  Events
    248           *          include timers, messages and any other user defined events.
    249           *
    250           * @param   task_id  - The OSAL assigned task ID.
    251           * @param   events - events to process.  This is a bit map and can
    252           *                   contain more than one event.
    253           *
    254           * @return  none
    255           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    256          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    257          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    258            afIncomingMSGPacket_t *MSGpkt;
    259            (void)task_id;  // Intentionally unreferenced parameter
    260          
    261            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   7003         JNZ     $+5
   \   00000D   02....       LJMP    ??SampleApp_ProcessEvent_0 & 0xFFFF
    262            {
    263              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000010                ; Setup parameters for call to function osal_msg_receive
   \   000010   800E         SJMP    ??SampleApp_ProcessEvent_1
    264              while ( MSGpkt )
    265              {
    266                switch ( MSGpkt->hdr.event )
    267                {
    268                  // Received when a key is pressed
    269                  case KEY_CHANGE:
    270                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    271                    break;
    272          
    273                  // Received when a messages is received (OTA) for this endpoint
    274                  case AF_INCOMING_MSG_CMD:
    275                     if ( (SampleApp_NwkState == DEV_ROUTER)
    276                        || (SampleApp_NwkState == DEV_END_DEVICE) )
    277                      {
    278                      SampleApp_MessageMSGCB( MSGpkt );
    279                      }
    280                    break;
    281          
    282                  // Received whenever the device changes state in the network
    283                  case ZDO_STATE_CHANGE:
    284                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
    285                    if ( (SampleApp_NwkState == DEV_ZB_COORD)
    286                        || (SampleApp_NwkState == DEV_ROUTER)
    287                        || (SampleApp_NwkState == DEV_END_DEVICE) )
    288                    {
    289                      // Start sending the periodic message in a regular interval.
    290                      osal_start_timerEx( SampleApp_TaskID,
    291                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    292                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
    293                    }
    294                    else
    295                    {
    296                      // Device is no longer in the network
    297                    }
    298                    break;
    299                    
    300                  case CMD_SERIAL_MSG: //´®¿ÚÊÕµ½Êý¾ÝºóÓÉ MT_UART ²ã´«µÝ¹ýÀ´µÄ/Êý¾Ý£¬±àÒëÊ±²»¶¨
    301                                         //Òå MTÏà¹ØÄÚÈÝ
    302                     SampleApp_SerialCMD((mtOSALSerialData_t *)MSGpkt);
   \                     ??SampleApp_ProcessEvent_2:
   \   000012                ; Setup parameters for call to function SampleApp_SerialCMD
   \   000012   AA..         MOV     R2,?V0 + 0
   \   000014   AB..         MOV     R3,?V0 + 1
   \   000016   12....       LCALL   ??SampleApp_SerialCMD?relay
    303                     break;
    304                    
    305                    
    306                    
    307                  default:
    308                    break;
    309                }
    310          
    311                // Release the memory
    312                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_3:
   \   000019                ; Setup parameters for call to function osal_msg_deallocate
   \   000019   AA..         MOV     R2,?V0 + 0
   \   00001B   AB..         MOV     R3,?V0 + 1
   \   00001D   12....       LCALL   ??osal_msg_deallocate?relay
    313          
    314                // Next - if one is available
    315                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000020                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000020   90....       MOV     DPTR,#SampleApp_TaskID
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F9           MOV     R1,A
   \   000025   12....       LCALL   ??osal_msg_receive?relay
   \   000028   8A..         MOV     ?V0 + 0,R2
   \   00002A   8B..         MOV     ?V0 + 1,R3
   \   00002C   E5..         MOV     A,?V0 + 0
   \   00002E   45..         ORL     A,?V0 + 1
   \   000030   6069         JZ      ??SampleApp_ProcessEvent_4
   \   000032   85..82       MOV     DPL,?V0 + 0
   \   000035   85..83       MOV     DPH,?V0 + 1
   \   000038   E0           MOVX    A,@DPTR
   \   000039   14           DEC     A
   \   00003A   60D6         JZ      ??SampleApp_ProcessEvent_2
   \   00003C   24E7         ADD     A,#-0x19
   \   00003E   601E         JZ      ??SampleApp_ProcessEvent_5
   \   000040   245A         ADD     A,#0x5a
   \   000042   6006         JZ      ??SampleApp_ProcessEvent_6
   \   000044   24EF         ADD     A,#-0x11
   \   000046   602C         JZ      ??SampleApp_ProcessEvent_7
   \   000048   80CF         SJMP    ??SampleApp_ProcessEvent_3
   \                     ??SampleApp_ProcessEvent_6:
   \   00004A                ; Setup parameters for call to function SampleApp_HandleKeys
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   FA           MOV     R2,A
   \   00004F   85..82       MOV     DPL,?V0 + 0
   \   000052   85..83       MOV     DPH,?V0 + 1
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F9           MOV     R1,A
   \   000059   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   00005C   80BB         SJMP    ??SampleApp_ProcessEvent_3
   \                     ??SampleApp_ProcessEvent_5:
   \   00005E   90....       MOV     DPTR,#SampleApp_NwkState
   \   000061   E0           MOVX    A,@DPTR
   \   000062   6407         XRL     A,#0x7
   \   000064   6005         JZ      ??SampleApp_ProcessEvent_8
   \   000066   E0           MOVX    A,@DPTR
   \   000067   6406         XRL     A,#0x6
   \   000069   70AE         JNZ     ??SampleApp_ProcessEvent_3
   \                     ??SampleApp_ProcessEvent_8:
   \   00006B                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   00006B   AA..         MOV     R2,?V0 + 0
   \   00006D   AB..         MOV     R3,?V0 + 1
   \   00006F   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   000072   80A5         SJMP    ??SampleApp_ProcessEvent_3
   \                     ??SampleApp_ProcessEvent_7:
   \   000074   A3           INC     DPTR
   \   000075   E0           MOVX    A,@DPTR
   \   000076   90....       MOV     DPTR,#SampleApp_NwkState
   \   000079   F0           MOVX    @DPTR,A
   \   00007A   6409         XRL     A,#0x9
   \   00007C   600A         JZ      ??SampleApp_ProcessEvent_9
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   6407         XRL     A,#0x7
   \   000081   6005         JZ      ??SampleApp_ProcessEvent_9
   \   000083   E0           MOVX    A,@DPTR
   \   000084   6406         XRL     A,#0x6
   \   000086   7091         JNZ     ??SampleApp_ProcessEvent_3
   \                     ??SampleApp_ProcessEvent_9:
   \   000088                ; Setup parameters for call to function osal_start_timerEx
   \   000088   7C88         MOV     R4,#-0x78
   \   00008A   7D13         MOV     R5,#0x13
   \   00008C   7A01         MOV     R2,#0x1
   \   00008E   7B00         MOV     R3,#0x0
   \   000090   90....       MOV     DPTR,#SampleApp_TaskID
   \   000093   E0           MOVX    A,@DPTR
   \   000094   F9           MOV     R1,A
   \   000095   12....       LCALL   ??osal_start_timerEx?relay
   \   000098   02....       LJMP    ??SampleApp_ProcessEvent_3 & 0xFFFF
    316              }
    317          
    318              // return unprocessed events
    319              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_4:
   \   00009B   EE           MOV     A,R6
   \   00009C   FA           MOV     R2,A
   \   00009D   EF           MOV     A,R7
   \   00009E   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_10:
   \   0000A0   FB           MOV     R3,A
   \   0000A1   802A         SJMP    ??SampleApp_ProcessEvent_11
    320            }
    321          
    322            // Send a message out - This event is generated by a timer
    323            //  (setup in SampleApp_Init()).
    324            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   0000A3   EE           MOV     A,R6
   \   0000A4   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000A6   5021         JNC     ??SampleApp_ProcessEvent_12
    325            {
    326              // Send the periodic message
    327              SampleApp_SendPeriodicMessage();
   \   0000A8                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   0000A8   12....       LCALL   ??SampleApp_SendPeriodicMessage?relay
    328          
    329              // Setup to send message again in normal period (+ a little jitter)
    330              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    331                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   0000AB                ; Setup parameters for call to function osal_rand
   \   0000AB   12....       LCALL   ??osal_rand?relay
   \   0000AE                ; Setup parameters for call to function osal_start_timerEx
   \   0000AE   EA           MOV     A,R2
   \   0000AF   2488         ADD     A,#-0x78
   \   0000B1   FC           MOV     R4,A
   \   0000B2   E4           CLR     A
   \   0000B3   3413         ADDC    A,#0x13
   \   0000B5   FD           MOV     R5,A
   \   0000B6   7A01         MOV     R2,#0x1
   \   0000B8   7B00         MOV     R3,#0x0
   \   0000BA   90....       MOV     DPTR,#SampleApp_TaskID
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   F9           MOV     R1,A
   \   0000BF   12....       LCALL   ??osal_start_timerEx?relay
    332          
    333              // return unprocessed events
    334              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0000C2   EE           MOV     A,R6
   \   0000C3   6401         XRL     A,#0x1
   \   0000C5   FA           MOV     R2,A
   \   0000C6   EF           MOV     A,R7
   \   0000C7   80D7         SJMP    ??SampleApp_ProcessEvent_10
    335            }
    336          
    337            // Discard unknown events
    338            return 0;
   \                     ??SampleApp_ProcessEvent_12:
   \   0000C9   7A00         MOV     R2,#0x0
   \   0000CB   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_11:
   \   0000CD                REQUIRE ?Subroutine0
   \   0000CD                ; // Fall through to label ?Subroutine0
    339          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    340          
    341          /*********************************************************************
    342           * Event Generation Functions
    343           */
    344          /*********************************************************************
    345           * @fn      SampleApp_HandleKeys
    346           *
    347           * @brief   Handles all key events for this device.
    348           *
    349           * @param   shift - true if in shift/alt.
    350           * @param   keys - bit field for key events. Valid entries:
    351           *                 HAL_KEY_SW_2
    352           *                 HAL_KEY_SW_1
    353           *
    354           * @return  none
    355           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    356          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    357          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    358            (void)shift;  // Intentionally unreferenced parameter
    359            
    360            if ( keys & HAL_KEY_SW_1 )
   \   000007   A2E0         MOV     C,0xE0 /* A   */.0
   \   000009   5007         JNC     ??SampleApp_HandleKeys_0
    361            {
    362              /* This key sends the Flash Command is sent to Group 1.
    363               * This device will not receive the Flash Command from this
    364               * device (even if it belongs to group 1).
    365               */
    366              SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \   00000B                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   00000B   7AE8         MOV     R2,#-0x18
   \   00000D   7B03         MOV     R3,#0x3
   \   00000F   12....       LCALL   ??SampleApp_SendFlashMessage?relay
    367            }
    368          
    369            if ( keys & HAL_KEY_SW_2 )
   \                     ??SampleApp_HandleKeys_0:
   \   000012   EE           MOV     A,R6
   \   000013   A2E1         MOV     C,0xE0 /* A   */.1
   \   000015   5024         JNC     ??SampleApp_HandleKeys_1
    370            {
    371              /* The Flashr Command is sent to Group 1.
    372               * This key toggles this device in and out of group 1.
    373               * If this device doesn't belong to group 1, this application
    374               * will not receive the Flash command sent to group 1.
    375               */
    376              aps_Group_t *grp;
    377              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    378              if ( grp )
   \   000017                ; Setup parameters for call to function aps_FindGroup
   \   000017   7A01         MOV     R2,#0x1
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   7914         MOV     R1,#0x14
   \   00001D   12....       LCALL   ??aps_FindGroup?relay
   \   000020   8B..         MOV     ?V0 + 1,R3
   \   000022   EA           MOV     A,R2
   \   000023   45..         ORL     A,?V0 + 1
   \   000025   600B         JZ      ??SampleApp_HandleKeys_2
    379              {
    380                // Remove from the group
    381                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
   \   000027                ; Setup parameters for call to function aps_RemoveGroup
   \   000027   7A01         MOV     R2,#0x1
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   7914         MOV     R1,#0x14
   \   00002D   12....       LCALL   ??aps_RemoveGroup?relay
   \   000030   8009         SJMP    ??SampleApp_HandleKeys_1
    382              }
    383              else
    384              {
    385                // Add to the flash group
    386                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \                     ??SampleApp_HandleKeys_2:
   \   000032                ; Setup parameters for call to function aps_AddGroup
   \   000032   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   000034   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   000036   7914         MOV     R1,#0x14
   \   000038   12....       LCALL   ??aps_AddGroup?relay
    387              }
    388            }
    389          }
   \                     ??SampleApp_HandleKeys_1:
   \   00003B   80..         SJMP    ??Subroutine4_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine4_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    390          
    391          /*********************************************************************
    392           * LOCAL FUNCTIONS
    393           */
    394          
    395          /*********************************************************************
    396           * @fn      SampleApp_MessageMSGCB
    397           *
    398           * @brief   Data message processor callback.  This function processes
    399           *          any incoming data - probably from other devices.  So, based
    400           *          on cluster ID, perform the intended action.
    401           *
    402           * @param   none
    403           *
    404           * @return  none
    405           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    406          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    407          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    408            uint16 flashTime;
    409          
    410            switch ( pkt->clusterId )
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6402         XRL     A,#0x2
   \   000010   7002         JNZ     ??SampleApp_MessageMSGCB_0
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \                     ??SampleApp_MessageMSGCB_0:
   \   000014   703B         JNZ     ??SampleApp_MessageMSGCB_1
    411            {
    412              case SAMPLEAPP_PERIODIC_CLUSTERID:
    413                break;
    414          
    415              case SAMPLEAPP_FLASH_CLUSTERID:
    416                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    417                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \   000016   EA           MOV     A,R2
   \   000017   2422         ADD     A,#0x22
   \   000019   F582         MOV     DPL,A
   \   00001B   EB           MOV     A,R3
   \   00001C   3400         ADDC    A,#0x0
   \   00001E   F583         MOV     DPH,A
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F8           MOV     R0,A
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F9           MOV     R1,A
   \   000025                ; Setup parameters for call to function HalLedBlink
   \   000025   8882         MOV     DPL,R0
   \   000027   8983         MOV     DPH,R1
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   FA           MOV     R2,A
   \   00002C   8882         MOV     DPL,R0
   \   00002E   8983         MOV     DPH,R1
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F9           MOV     R1,A
   \   000034   EA           MOV     A,R2
   \   000035   2400         ADD     A,#0x0
   \   000037   F5..         MOV     ?V0 + 0,A
   \   000039   E4           CLR     A
   \   00003A   39           ADDC    A,R1
   \   00003B   F5..         MOV     ?V0 + 1,A
   \   00003D   7402         MOV     A,#0x2
   \   00003F   78..         MOV     R0,#?V0 + 0
   \   000041   12....       LCALL   ?US_SHR
   \   000044   AC..         MOV     R4,?V0 + 0
   \   000046   AD..         MOV     R5,?V0 + 1
   \   000048   7B32         MOV     R3,#0x32
   \   00004A   7A04         MOV     R2,#0x4
   \   00004C   7908         MOV     R1,#0x8
   \   00004E   12....       LCALL   ??HalLedBlink?relay
    418                break;
    419            }
    420          }
   \                     ??SampleApp_MessageMSGCB_1:
   \   000051   80..         SJMP    ??Subroutine4_0
    421          
    422          /*********************************************************************
    423           * @fn      SampleApp_SendPeriodicMessage
    424           *
    425           * @brief   Send the periodic message.
    426           *
    427           * @param   none
    428           *
    429           * @return  none
    430           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine4_0
   \   000003                ; // Fall through to label ??Subroutine4_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    431          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    432          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    433            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    434                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    435                                 1,
    436                                 (uint8*)&SampleAppPeriodicCounter,
    437                                 &SampleApp_TransID,
    438                                 AF_DISCV_ROUTE,
    439                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000005                ; Setup parameters for call to function AF_DataRequest
   \   000005   75..1E       MOV     ?V0 + 0,#0x1e
   \   000008   78..         MOV     R0,#?V0 + 0
   \   00000A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00000D   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000010   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000018   75....       MOV     ?V0 + 0,#SampleAppPeriodicCounter & 0xff
   \   00001B   75....       MOV     ?V0 + 1,#(SampleAppPeriodicCounter >> 8) & 0xff
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..01       MOV     ?V0 + 0,#0x1
   \   000026   75..00       MOV     ?V0 + 1,#0x0
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   78..         MOV     R0,#?V0 + 0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   7920         MOV     R1,#0x20
   \   000035   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000037   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000039   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   00003B   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00003D   12....       LCALL   ??AF_DataRequest?relay
   \   000040   7409         MOV     A,#0x9
   \   000042   02....       LJMP    ?Subroutine1 & 0xFFFF
    440            {
    441            }
    442            else
    443            {
    444              // Error occurred in request to send.
    445            }
    446          }
    447          
    448          /*********************************************************************
    449           * @fn      SampleApp_SendFlashMessage
    450           *
    451           * @brief   Send the flash message to group 1.
    452           *
    453           * @param   flashTime - in milliseconds
    454           *
    455           * @return  none
    456           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    457          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    458          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    459            uint8 buffer[3];
    460            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000010   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000013   E0           MOVX    A,@DPTR
   \   000014   04           INC     A
   \   000015   F0           MOVX    @DPTR,A
    461            buffer[1] = LO_UINT16( flashTime );
   \   000016   7401         MOV     A,#0x1
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   EA           MOV     A,R2
   \   00001C   F0           MOVX    @DPTR,A
    462            buffer[2] = HI_UINT16( flashTime );
   \   00001D   7402         MOV     A,#0x2
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   EB           MOV     A,R3
   \   000023   F0           MOVX    @DPTR,A
    463          
    464            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    465                                 SAMPLEAPP_FLASH_CLUSTERID,
    466                                 3,
    467                                 buffer,
    468                                 &SampleApp_TransID,
    469                                 AF_DISCV_ROUTE,
    470                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000024                ; Setup parameters for call to function AF_DataRequest
   \   000024   75..1E       MOV     ?V0 + 0,#0x1e
   \   000027   78..         MOV     R0,#?V0 + 0
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002C   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00002F   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000032   78..         MOV     R0,#?V0 + 0
   \   000034   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000037   7403         MOV     A,#0x3
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   8582..       MOV     ?V0 + 0,DPL
   \   00003F   8583..       MOV     ?V0 + 1,DPH
   \   000042   78..         MOV     R0,#?V0 + 0
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000047   75..03       MOV     ?V0 + 0,#0x3
   \   00004A   75..00       MOV     ?V0 + 1,#0x0
   \   00004D   78..         MOV     R0,#?V0 + 0
   \   00004F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000052   75..02       MOV     ?V0 + 0,#0x2
   \   000055   78..         MOV     R0,#?V0 + 0
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005A   7920         MOV     R1,#0x20
   \   00005C   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   00005E   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000060   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   000062   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000064   12....       LCALL   ??AF_DataRequest?relay
   \   000067   7409         MOV     A,#0x9
   \   000069   12....       LCALL   ?DEALLOC_XSTACK8
    471            {
    472            }
    473            else
    474            {
    475              // Error occurred in request to send.
    476            }
    477          }
   \   00006C   7403         MOV     A,#0x3
   \   00006E   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET
    478          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    479          void SampleApp_SerialCMD(mtOSALSerialData_t *cmdMsg)
   \                     SampleApp_SerialCMD:
    480          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    481              uint8 i,len,*str=NULL; //len ÓÃÀ´´æ·ÅÊµ¼ÊÊý¾ÝµÄ³¤¶È£¨µ¥Î»Îª×Ö½Ú£©
    482              str=cmdMsg->msg; //Ö¸Ïò¼ÇÂ¼Êý¾Ý³¤¶ÈÄÇ¸ö×Ö½Ú
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F5..         MOV     ?V0 + 0,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V0 + 1,A
    483              len=*str; //msg ÀïµÄµÚ 1 ¸ö×Ö½Ú´ú±íºóÃæµÄÊý¾Ý³¤¶È
   \   000017   85..82       MOV     DPL,?V0 + 0
   \   00001A   F583         MOV     DPH,A
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   FF           MOV     R7,A
    484          /********´òÓ¡³ö´®¿Ú½ÓÊÕµ½µÄÊý¾Ý£¬ÓÃÓÚÌáÊ¾*********/
    485              for(i=1;i<=len;i++){ // ¶ÁÈ¡½ÓÊÕµÄ×Ö·û    
   \   00001E   7E01         MOV     R6,#0x1
   \   000020   8025         SJMP    ??SampleApp_SerialCMD_0
    486                char receivedChar = *(str + i);
    487                 if (receivedChar >= '0' && receivedChar <= '9') {
    488                     HalUARTWrite(0, &receivedChar, 1);     // ½«×Ö·û·¢ËÍµ½´®¿ÚÖúÊÖ
                                            ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
    489                     HalUARTWrite(0, "\n", 1);              // »»ÐÐ
    490                     HalLedOnOff (HAL_LED_ALL,HAL_LED_MODE_OFF );
    491                     HalLedBlink(HAL_LED_1,5,50,1000);   // ¿ØÖÆ D2 ÉÁË¸5´Î
    492                 }else if (receivedChar >= 'A' && receivedChar <= 'F') {  
    493                     HalUARTWrite(0, &receivedChar, 1);     // ½«×Ö·û·¢ËÍµ½´®¿ÚÖúÊÖ
                                            ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
    494                     HalUARTWrite(0, "\n", 1);              // »»ÐÐ
    495                     HalLedOnOff (HAL_LED_ALL,HAL_LED_MODE_OFF);
    496                     HalLedBlink(HAL_LED_2,5,50,1000);   // ¿ØÖÆ D3 ÉÁË¸5´Î
    497                }else{
    498                      char errorMsg[] = "error\n";
   \                     ??SampleApp_SerialCMD_1:
   \   000022   7401         MOV     A,#0x1
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   AC82         MOV     R4,DPL
   \   000029   AD83         MOV     R5,DPH
   \   00002B   7583..       MOV     DPH,#(`?<Constant "error\\n">` >> 8) & 0xff
   \   00002E   7582..       MOV     DPL,#`?<Constant "error\\n">` & 0xff
   \   000031   7407         MOV     A,#0x7
   \   000033   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    499                      HalUARTWrite(0, errorMsg, sizeof(errorMsg) - 1); // ·¢ËÍ "error" µ½´®¿ÚÖúÊÖ
                                             ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   000036                ; Setup parameters for call to function HalUARTWrite
   \   000036   7C06         MOV     R4,#0x6
   \   000038   FD           MOV     R5,A
   \   000039   04           INC     A
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   AA82         MOV     R2,DPL
   \   00003F   AB83         MOV     R3,DPH
   \   000041   7900         MOV     R1,#0x0
   \   000043   12....       LCALL   ??HalUARTWrite?relay
    500                }      
   \                     ??SampleApp_SerialCMD_2:
   \   000046   0E           INC     R6
   \                     ??SampleApp_SerialCMD_0:
   \   000047   EF           MOV     A,R7
   \   000048   C3           CLR     C
   \   000049   9E           SUBB    A,R6
   \   00004A   4031         JC      ??SampleApp_SerialCMD_3
   \   00004C   8E..         MOV     ?V0 + 2,R6
   \   00004E   E5..         MOV     A,?V0 + 0
   \   000050   25..         ADD     A,?V0 + 2
   \   000052   F582         MOV     DPL,A
   \   000054   E5..         MOV     A,?V0 + 1
   \   000056   3400         ADDC    A,#0x0
   \   000058   F583         MOV     DPH,A
   \   00005A   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   00005D   24D0         ADD     A,#-0x30
   \   00005F   C3           CLR     C
   \   000060   940A         SUBB    A,#0xa
   \   000062   500A         JNC     ??SampleApp_SerialCMD_4
   \   000064                ; Setup parameters for call to function HalUARTWrite
   \   000064   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000067   7901         MOV     R1,#0x1
   \                     ??SampleApp_SerialCMD_5:
   \   000069   12....       LCALL   ??HalLedBlink?relay
   \   00006C   80D8         SJMP    ??SampleApp_SerialCMD_2
   \                     ??SampleApp_SerialCMD_4:
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   24BF         ADD     A,#-0x41
   \   000071   C3           CLR     C
   \   000072   9406         SUBB    A,#0x6
   \   000074   50AC         JNC     ??SampleApp_SerialCMD_1
   \   000076                ; Setup parameters for call to function HalUARTWrite
   \   000076   12....       LCALL   ?Subroutine2 & 0xFFFF
    501            }   
   \                     ??CrossCallReturnLabel_1:
   \   000079   7902         MOV     R1,#0x2
   \   00007B   80EC         SJMP    ??SampleApp_SerialCMD_5
    502          }
   \                     ??SampleApp_SerialCMD_3:
   \   00007D   7408         MOV     A,#0x8
   \   00007F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000082   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7C01         MOV     R4,#0x1
   \   000002   7D00         MOV     R5,#0x0
   \   000004   AA82         MOV     R2,DPL
   \   000006   AB83         MOV     R3,DPH
   \   000008   7900         MOV     R1,#0x0
   \   00000A   12....       LCALL   ??HalUARTWrite?relay
   \   00000D                ; Setup parameters for call to function HalUARTWrite
   \   00000D                ; Setup parameters for call to function HalUARTWrite
   \   00000D   7C01         MOV     R4,#0x1
   \   00000F   7D00         MOV     R5,#0x0
   \   000011   7A..         MOV     R2,#`?<Constant "\\n">` & 0xff
   \   000013   7B..         MOV     R3,#(`?<Constant "\\n">` >> 8) & 0xff
   \   000015   7900         MOV     R1,#0x0
   \   000017   12....       LCALL   ??HalUARTWrite?relay
   \   00001A                ; Setup parameters for call to function HalLedOnOff
   \   00001A                ; Setup parameters for call to function HalLedOnOff
   \   00001A   7A00         MOV     R2,#0x0
   \   00001C   790F         MOV     R1,#0xf
   \   00001E   12....       LCALL   ??HalLedOnOff?relay
   \   000021                ; Setup parameters for call to function HalLedBlink
   \   000021                ; Setup parameters for call to function HalLedBlink
   \   000021   7CE8         MOV     R4,#-0x18
   \   000023   7D03         MOV     R5,#0x3
   \   000025   7B32         MOV     R3,#0x32
   \   000027   7A05         MOV     R2,#0x5
   \   000029   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SerialCMD?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SerialCMD

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\n">`:
   \   000000   0A00         DB "\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "error\\n">`:
   \   000000   6572726F     DB "error\012"
   \            720A00  
    503          /*********************************************************************
    504          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     SampleApp_HandleKeys               0      0     22
       -> SampleApp_SendFlashMessage
                                        0      0     20
       -> aps_FindGroup                 0      0     20
       -> aps_RemoveGroup               0      0     20
       -> aps_AddGroup                  0      0     20
     SampleApp_Init                     0      0     14
       -> MT_UartInit                   0      0     22
       -> MT_UartRegisterTaskID         0      0     22
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> HalLcdWriteString             0      0     22
     SampleApp_MessageMSGCB             0      0     22
       -> HalLedBlink                   0      0     20
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> SampleApp_SerialCMD           0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> osal_start_timerEx            0      0     24
       -> SampleApp_SendPeriodicMessage
                                        0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24
     SampleApp_SendFlashMessage         1      0     32
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      0      0     31
       -> AF_DataRequest                0      0     38
     SampleApp_SerialCMD                2      0     32
       -> HalUARTWrite                  0      0     40
       -> HalUARTWrite                  0      0     40
       -> HalUARTWrite                  0      0     40
       -> HalLedOnOff                   0      0     40
       -> HalLedBlink                   0      0     40
       -> HalUARTWrite                  0      0     40
       -> HalUARTWrite                  0      0     40
       -> HalLedOnOff                   0      0     40
       -> HalLedBlink                   0      0     40


   Segment part sizes:

     Function/Label                        Bytes
     --------------                        -----
     P1SEL                                    1
     P1DIR                                    1
     SampleApp_ClusterList                    4
     SampleApp_SimpleDesc                    12
     SampleApp_epDesc                         6
     SampleApp_TaskID                         1
     SampleApp_NwkState                       1
     SampleApp_TransID                        1
     SampleApp_Periodic_DstAddr              12
     SampleApp_Flash_DstAddr                 12
     SampleApp_Group                         18
     SampleAppPeriodicCounter                 1
     SampleAppFlashCounter                    1
     SampleApp_Init                         174
     SampleApp_ProcessEvent                 205
     ?Subroutine0                             5
     SampleApp_HandleKeys                    61
     ??Subroutine4_0                          5
     SampleApp_MessageMSGCB                  83
     ?Subroutine1                             3
     SampleApp_SendPeriodicMessage           69
     SampleApp_SendFlashMessage             113
     ?Subroutine3                             9
     SampleApp_SerialCMD                    133
     ?Subroutine2                            42
     ??SampleApp_Init?relay                   6
     ??SampleApp_ProcessEvent?relay           6
     ??SampleApp_HandleKeys?relay             6
     ??SampleApp_MessageMSGCB?relay           6
     ??SampleApp_SendPeriodicMessage?relay    6
     ??SampleApp_SendFlashMessage?relay       6
     ??SampleApp_SerialCMD?relay              6
     ?<Constant "Group 1">                    8
     ?<Constant "SampleApp">                 10
     ?<Constant "\n">                         2
     ?<Constant "error\n">                    7

 
 902 bytes in segment BANKED_CODE
  42 bytes in segment BANK_RELAYS
   2 bytes in segment SFR_AN
  43 bytes in segment XDATA_ROM_C
  53 bytes in segment XDATA_Z
 
 944 bytes of CODE  memory
  43 bytes of CONST memory
   0 bytes of DATA  memory (+ 2 bytes shared)
  53 bytes of XDATA memory

Errors: none
Warnings: 3
