###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         09/Apr/2025  21:21:34 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\24631\Desktop\µç»ú\ÍÁÈÀÊª¶È\f\Projects\zs #
#                          tack\Samples\SampleApp\Source\Coor.c               #
#    Command line       =  -f C:\Users\24631\Desktop\µç»ú\ÍÁÈÀÊª¶È\f\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\ #
#                          CC2530DB\f8wCoord.cfg (-DCPU32MHZ                  #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f C:\Users\24631\Desktop\µç»ú\ÍÁÈÀÊª¶È\f\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\ #
#                          CC2530DB\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0     #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x0085                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 C:\Users\24631\Desktop\µç»ú #
#                          \ÍÁÈÀÊª¶È\f\Projects\zstack\Samples\SampleApp\Sour #
#                          ce\Coor.c -D ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC  #
#                          -D xMT_ZDO_FUNC -D xLCD_SUPPORTED=DEBUG -lC        #
#                          C:\Users\24631\Desktop\µç»ú\ÍÁÈÀÊª¶È\f\Projects\zs #
#                          tack\Samples\SampleApp\CC2530DB\CoordinatorEB\List #
#                          \ -lA C:\Users\24631\Desktop\µç»ú\ÍÁÈÀÊª¶È\f\Proje #
#                          cts\zstack\Samples\SampleApp\CC2530DB\CoordinatorE #
#                          B\List\ --diag_suppress Pe001,Pa010 -o             #
#                          C:\Users\24631\Desktop\µç»ú\ÍÁÈÀÊª¶È\f\Projects\zs #
#                          tack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj\ #
#                           -e --no_code_motion --debug --core=plain          #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I C:\Users\24631\Desktop\µç» #
#                          ú\ÍÁÈÀÊª¶È\f\Projects\zstack\Samples\SampleApp\CC2 #
#                          530DB\ -I C:\Users\24631\Desktop\µç»ú\ÍÁÈÀÊª¶È\f\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\Sourc #
#                          e\ -I C:\Users\24631\Desktop\µç»ú\ÍÁÈÀÊª¶È\f\Proje #
#                          cts\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMa #
#                          in\TI2530DB\ -I C:\Users\24631\Desktop\µç»ú\ÍÁÈÀÊª #
#                          ¶È\f\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\Components\hal\include\ -I            #
#                          C:\Users\24631\Desktop\µç»ú\ÍÁÈÀÊª¶È\f\Projects\zs #
#                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Com #
#                          ponents\hal\target\CC2530EB\ -I                    #
#                          C:\Users\24631\Desktop\µç»ú\ÍÁÈÀÊª¶È\f\Projects\zs #
#                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Com #
#                          ponents\mac\include\ -I C:\Users\24631\Desktop\µç» #
#                          ú\ÍÁÈÀÊª¶È\f\Projects\zstack\Samples\SampleApp\CC2 #
#                          530DB\..\..\..\..\..\Components\mac\high_level\    #
#                          -I C:\Users\24631\Desktop\µç»ú\ÍÁÈÀÊª¶È\f\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ #
#                          Components\mac\low_level\srf04\ -I                 #
#                          C:\Users\24631\Desktop\µç»ú\ÍÁÈÀÊª¶È\f\Projects\zs #
#                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Com #
#                          ponents\mac\low_level\srf04\single_chip\ -I        #
#                          C:\Users\24631\Desktop\µç»ú\ÍÁÈÀÊª¶È\f\Projects\zs #
#                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Com #
#                          ponents\mt\ -I C:\Users\24631\Desktop\µç»ú\ÍÁÈÀÊª¶ #
#                          È\f\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\Components\osal\include\ -I            #
#                          C:\Users\24631\Desktop\µç»ú\ÍÁÈÀÊª¶È\f\Projects\zs #
#                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Com #
#                          ponents\services\saddr\ -I                         #
#                          C:\Users\24631\Desktop\µç»ú\ÍÁÈÀÊª¶È\f\Projects\zs #
#                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Com #
#                          ponents\services\sdata\ -I                         #
#                          C:\Users\24631\Desktop\µç»ú\ÍÁÈÀÊª¶È\f\Projects\zs #
#                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Com #
#                          ponents\stack\af\ -I C:\Users\24631\Desktop\µç»ú\Í #
#                          ÁÈÀÊª¶È\f\Projects\zstack\Samples\SampleApp\CC2530 #
#                          DB\..\..\..\..\..\Components\stack\nwk\ -I         #
#                          C:\Users\24631\Desktop\µç»ú\ÍÁÈÀÊª¶È\f\Projects\zs #
#                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Com #
#                          ponents\stack\sapi\ -I C:\Users\24631\Desktop\µç»ú #
#                          \ÍÁÈÀÊª¶È\f\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\Components\stack\sec\ -I       #
#                          C:\Users\24631\Desktop\µç»ú\ÍÁÈÀÊª¶È\f\Projects\zs #
#                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Com #
#                          ponents\stack\sys\ -I C:\Users\24631\Desktop\µç»ú\ #
#                          ÍÁÈÀÊª¶È\f\Projects\zstack\Samples\SampleApp\CC253 #
#                          0DB\..\..\..\..\..\Components\stack\zdo\ -I        #
#                          C:\Users\24631\Desktop\µç»ú\ÍÁÈÀÊª¶È\f\Projects\zs #
#                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Com #
#                          ponents\zmac\ -I C:\Users\24631\Desktop\µç»ú\ÍÁÈÀÊ #
#                          ª¶È\f\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\..\..\Components\zmac\f8w\ -Ohz            #
#                          --require_prototypes                               #
#    List file          =  C:\Users\24631\Desktop\µç»ú\ÍÁÈÀÊª¶È\f\Projects\zs #
#                          tack\Samples\SampleApp\CC2530DB\CoordinatorEB\List #
#                          \Coor.lst                                          #
#    Object file        =  C:\Users\24631\Desktop\µç»ú\ÍÁÈÀÊª¶È\f\Projects\zs #
#                          tack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj\ #
#                          Coor.r51                                           #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\24631\Desktop\µç»ú\ÍÁÈÀÊª¶È\f\Projects\zstack\Samples\SampleApp\Source\Coor.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8f
   \   unsigned char volatile __sfr P0INP
   \                     P0INP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb4
   \   unsigned char volatile __sfr ADCCON1
   \                     ADCCON1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb6
   \   unsigned char volatile __sfr ADCCON3
   \                     ADCCON3:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xba
   \   unsigned char volatile __sfr ADCL
   \                     ADCL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbb
   \   unsigned char volatile __sfr ADCH
   \                     ADCH:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc1
   \   unsigned char volatile __sfr U0DBUF
   \                     U0DBUF:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe8
   \   union <unnamed> volatile __sfr _A_IRCON2
   \                     _A_IRCON2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf2
   \   unsigned char volatile __sfr ADCCFG
   \                     ADCCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf4
   \   unsigned char volatile __sfr P1SEL
   \                     P1SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          #include "MT_UART.h"
     75          #include "MT.h"
     76          #include "AF.h"
     77          #include "ioCC2530.h" 
     78          #include "stdio.h"
     79          #include "stdlib.h"
     80          #include "string.h"
     81          /*********************************************************************
     82           * MACROS
     83           */
     84          
     85          /*********************************************************************
     86           * CONSTANTS
     87           */
     88          
     89          /*********************************************************************
     90           * TYPEDEFS
     91           */
     92          
     93          /*********************************************************************
     94           * GLOBAL VARIABLES
     95           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
     96          char temp1[]="light";
   \                     temp1:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for temp1>`
   \   000006                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     97          char temp2[]="dark";
   \                     temp2:
   \   000000                DS 5
   \   000005                REQUIRE `?<Initializer for temp2>`
   \   000005                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     98          char temp3[]="";
   \                     temp3:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     99          char TxBuf[5];
   \                     TxBuf:
   \   000000                DS 5
   \   000005                REQUIRE __INIT_XDATA_Z
    100          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    101          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
    102          {
    103            SAMPLEAPP_PERIODIC_CLUSTERID,
    104            SAMPLEAPP_FLASH_CLUSTERID
    105          };
    106          

   \                                 In  segment XDATA_ROM_C, align 1
    107          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
    108          {
    109            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    110            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    111            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    112            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    113            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    114            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    115            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    116            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    117            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    118          };
    119          
    120          // This is the Endpoint/Interface description.  It is defined here, but
    121          // filled-in in SampleApp_Init().  Another way to go would be to fill
    122          // in the structure here and make it a "const" (in code space).  The
    123          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    124          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    125          
    126          /*********************************************************************
    127           * EXTERNAL VARIABLES
    128           */
    129          
    130          /*********************************************************************
    131           * EXTERNAL FUNCTIONS
    132           */
    133          
    134          /*********************************************************************
    135           * LOCAL VARIABLES
    136           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    137          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    138                                    // This variable will be received when
    139                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    140          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    141          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    143          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    146          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    148          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    149          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    151          uint8 DS18B20_Reset(void);
    152          uint8 OneWire_ReadByte(void);
    153          uint16 DS18B20_GetTemperature(void);

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    154          uint16 lightData;
   \                     lightData:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    155          uint16 ReadlightData( void );
    156          /*********************************************************************
    157           * LOCAL FUNCTIONS
    158           */
    159          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    160          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    161          void SampleApp_SendPeriodicMessage( void );
    162          void SampleApp_SendFlashMessage( uint16 flashTime );
    163          void UartSendString(char *Data, int len);
    164          void delay_us(unsigned int us);
    165          void OneWire_WriteByte(uint8 byte);
    166          
    167          /*********************************************************************
    168           * NETWORK LAYER CALLBACKS
    169           */
    170          
    171          /*********************************************************************
    172           * PUBLIC FUNCTIONS
    173           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    174          void delay_us(unsigned int us) {
   \                     delay_us:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   801E         SJMP    ??delay_us_0
    175              while (us--) {
    176                  // ÒÔÏÂÑ­»·ÔÚ32MHzÏÂÔ¼1¦Ìs
    177                  __asm
    178                  (
    179                      "NOP\n" "NOP\n" "NOP\n" "NOP\n" "NOP\n" "NOP\n" "NOP\n" "NOP\n"
    180                      "NOP\n" "NOP\n" "NOP\n" "NOP\n" "NOP\n" "NOP\n" "NOP\n" "NOP\n"
    181                      "NOP\n" "NOP\n" "NOP\n" "NOP\n" "NOP\n" "NOP\n" "NOP\n" "NOP\n"
    182                      "NOP\n" "NOP\n" "NOP\n" "NOP\n" "NOP\n" "NOP\n" 
    183                  );
   \                     ??delay_us_1:
   \   000002   00           NOP
   \   000003   00           NOP
   \   000004   00           NOP
   \   000005   00           NOP
   \   000006   00           NOP
   \   000007   00           NOP
   \   000008   00           NOP
   \   000009   00           NOP
   \   00000A   00           NOP
   \   00000B   00           NOP
   \   00000C   00           NOP
   \   00000D   00           NOP
   \   00000E   00           NOP
   \   00000F   00           NOP
   \   000010   00           NOP
   \   000011   00           NOP
   \   000012   00           NOP
   \   000013   00           NOP
   \   000014   00           NOP
   \   000015   00           NOP
   \   000016   00           NOP
   \   000017   00           NOP
   \   000018   00           NOP
   \   000019   00           NOP
   \   00001A   00           NOP
   \   00001B   00           NOP
   \   00001C   00           NOP
   \   00001D   00           NOP
   \   00001E   00           NOP
   \   00001F   00           NOP
    184              }
   \                     ??delay_us_0:
   \   000020   EA           MOV     A,R2
   \   000021   F8           MOV     R0,A
   \   000022   EB           MOV     A,R3
   \   000023   F9           MOV     R1,A
   \   000024   E8           MOV     A,R0
   \   000025   24FF         ADD     A,#-0x1
   \   000027   1A           DEC     R2
   \   000028   E9           MOV     A,R1
   \   000029   34FF         ADDC    A,#-0x1
   \   00002B   FB           MOV     R3,A
   \   00002C   E8           MOV     A,R0
   \   00002D   49           ORL     A,R1
   \   00002E   70D2         JNZ     ??delay_us_1
    185          }
   \   000030   02....       LJMP    ?BRET
    186          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    187          uint8 DS18B20_Reset(void){                         
   \                     DS18B20_Reset:
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    188            P0DIR |= 0x80;    //ÉèÖÃÎªÊä³öÄ£Ê½
   \   000005   43FD80       ORL     0xfd,#0x80
    189            P0_7=0;      //À­µÍP0.7
   \   000008   C287         CLR     0x80.7
    190            delay_us(480);
   \   00000A                ; Setup parameters for call to function delay_us
   \   00000A   7AE0         MOV     R2,#-0x20
   \   00000C   7B01         MOV     R3,#0x1
   \   00000E   12....       LCALL   ??delay_us?relay
    191            
    192            // ÊÍ·Å×ÜÏß£¬ÇÐ»»ÎªÊäÈëÄ£Ê½¼ì²âÓ¦´ð
    193            P0DIR &= ~0x80;   // ÉèÖÃÎªÊäÈëÄ£Ê½
   \   000011   53FD7F       ANL     0xfd,#0x7f
    194            delay_us(60);
   \   000014                ; Setup parameters for call to function delay_us
   \   000014   7A3C         MOV     R2,#0x3c
   \   000016   7B00         MOV     R3,#0x0
   \   000018   12....       LCALL   ??delay_us?relay
    195            
    196            uint8 presence = 0;
   \   00001B   7E00         MOV     R6,#0x0
    197            if ((P0 & 0x80) == 0) {  // ¼ì²â´æÔÚÂö³å£¨µÍµçÆ½ÓÐÐ§£©
   \   00001D   A287         MOV     C,0x80.7
   \   00001F   4008         JC      ??DS18B20_Reset_0
    198                 presence = 1;
   \   000021   0E           INC     R6
    199                 delay_us(420);        // µÈ´ý´æÔÚÂö³å½áÊø£¨×Ü480¦Ìs£©     
   \   000022                ; Setup parameters for call to function delay_us
   \   000022   7AA4         MOV     R2,#-0x5c
   \   000024   7B01         MOV     R3,#0x1
   \   000026   12....       LCALL   ??delay_us?relay
    200              }
    201            return presence;        // ·µ»Ø1±íÊ¾³õÊ¼»¯³É¹¦
   \                     ??DS18B20_Reset_0:
   \   000029   80..         SJMP    ?Subroutine0
   \   00002B                REQUIRE P0DIR
   \   00002B                REQUIRE _A_P0
    202          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   EE           MOV     A,R6
   \   000001   F9           MOV     R1,A
   \   000002                REQUIRE ??Subroutine8_0
   \   000002                ; // Fall through to label ??Subroutine8_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine8_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    203          
    204          // Ë³Ðò·¢ËÍ

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    205          void OneWire_WriteByte(uint8 byte) {
   \                     OneWire_WriteByte:
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
    206              for (uint8 i = 0; i < 8; i++) {
   \   000007   7E08         MOV     R6,#0x8
    207                  P0DIR |= 0x80;// ÉèÖÃÎªÊä³öÄ£Ê½
   \                     ??OneWire_WriteByte_0:
   \   000009   12....       LCALL   ?Subroutine4 & 0xFFFF
    208                  P0_7=0; // À­µÍ×ÜÏß¿ªÊ¼Ð´Ê±Ï¶
    209                  delay_us(1);
    210                  
    211                  if(byte & 0x01){
   \                     ??CrossCallReturnLabel_2:
   \   00000C   EF           MOV     A,R7
   \   00000D   A2E0         MOV     C,0xE0 /* A   */.0
   \   00000F   5003         JNC     ??OneWire_WriteByte_1
    212                        P0DIR &= ~0x80;
   \   000011   53FD7F       ANL     0xfd,#0x7f
    213                  }
    214                     
    215                  delay_us(60);
   \                     ??OneWire_WriteByte_1:
   \   000014                ; Setup parameters for call to function delay_us
   \   000014   7A3C         MOV     R2,#0x3c
   \   000016   12....       LCALL   ?Subroutine6 & 0xFFFF
    216                  P0DIR |= 0x80;
    217                  P0_7=1;
    218                  byte >>= 1;
   \                     ??CrossCallReturnLabel_6:
   \   000019   EF           MOV     A,R7
   \   00001A   C3           CLR     C
   \   00001B   13           RRC     A
   \   00001C   FF           MOV     R7,A
    219              }
   \   00001D   1E           DEC     R6
   \   00001E   EE           MOV     A,R6
   \   00001F   70E8         JNZ     ??OneWire_WriteByte_0
    220          }
   \   000021   80..         SJMP    ??Subroutine8_0
   \   000023                REQUIRE P0DIR
   \   000023                REQUIRE _A_P0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   12....       LCALL   ??delay_us?relay
   \   000005   43FD80       ORL     0xfd,#0x80
   \   000008   D287         SETB    0x80.7
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   43FD80       ORL     0xfd,#0x80
   \   000003   C287         CLR     0x80.7
   \   000005                ; Setup parameters for call to function delay_us
   \   000005                ; Setup parameters for call to function delay_us
   \   000005   7A01         MOV     R2,#0x1
   \   000007   7B00         MOV     R3,#0x0
   \   000009   12....       LCALL   ??delay_us?relay
   \   00000C   22           RET
    221          
    222          // Ë³Ðò¶ÁÈ¡

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    223          uint8 OneWire_ReadByte(void) {
   \                     OneWire_ReadByte:
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    224              uint8 byte = 0;
   \   000005   7E00         MOV     R6,#0x0
    225              for (uint8 i = 0; i < 8; i++) {
   \   000007   7F08         MOV     R7,#0x8
    226                  P0DIR |=0x80;
   \                     ??OneWire_ReadByte_0:
   \   000009   12....       LCALL   ?Subroutine4 & 0xFFFF
    227                  P0_7 = 0;
    228                  delay_us(1);
    229                  
    230                  P0DIR &= ~0x80;
   \                     ??CrossCallReturnLabel_3:
   \   00000C   53FD7F       ANL     0xfd,#0x7f
    231                  delay_us(9);
   \   00000F                ; Setup parameters for call to function delay_us
   \   00000F   7A09         MOV     R2,#0x9
   \   000011   7B00         MOV     R3,#0x0
   \   000013   12....       LCALL   ??delay_us?relay
    232                  
    233                  byte >>= 1;
   \   000016   EE           MOV     A,R6
   \   000017   C3           CLR     C
   \   000018   13           RRC     A
   \   000019   FE           MOV     R6,A
    234                  if(P0 & 0x80){
   \   00001A   A287         MOV     C,0x80.7
   \   00001C   5003         JNC     ??OneWire_ReadByte_1
    235                    byte |= 0x80;
   \   00001E   D2E7         SETB    0xE0 /* A   */.7
   \   000020   FE           MOV     R6,A
    236                  }
    237            
    238                  delay_us(50);
   \                     ??OneWire_ReadByte_1:
   \   000021                ; Setup parameters for call to function delay_us
   \   000021   7A32         MOV     R2,#0x32
   \   000023   12....       LCALL   ?Subroutine6 & 0xFFFF
    239                  P0DIR |= 0x80;
    240                  P0_7 = 1;
    241              }
   \                     ??CrossCallReturnLabel_7:
   \   000026   1F           DEC     R7
   \   000027   EF           MOV     A,R7
   \   000028   70DF         JNZ     ??OneWire_ReadByte_0
    242              return byte;
   \   00002A   80..         SJMP    ?Subroutine0
   \   00002C                REQUIRE P0DIR
   \   00002C                REQUIRE _A_P0
    243          }
    244          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    245          uint16 DS18B20_GetTemperature(void) {
   \                     DS18B20_GetTemperature:
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
    246              uint8 temp_low, temp_high;
    247              int16 temp_raw;
    248          
    249              if (!DS18B20_Reset()) return 0x7FFF;
   \   000005                ; Setup parameters for call to function DS18B20_Reset
   \   000005   12....       LCALL   ??DS18B20_Reset?relay
   \   000008   E9           MOV     A,R1
   \   000009   7006         JNZ     ??DS18B20_GetTemperature_0
   \                     ??DS18B20_GetTemperature_1:
   \   00000B   7AFF         MOV     R2,#-0x1
   \   00000D   7B7F         MOV     R3,#0x7f
   \   00000F   8079         SJMP    ??DS18B20_GetTemperature_2
    250              
    251              OneWire_WriteByte(0xCC);   // Skip ROM£¨µ¥Éè±¸£©
   \                     ??DS18B20_GetTemperature_0:
   \   000011                ; Setup parameters for call to function OneWire_WriteByte
   \   000011   79CC         MOV     R1,#-0x34
   \   000013   12....       LCALL   ??OneWire_WriteByte?relay
    252              OneWire_WriteByte(0x44);   // Æô¶¯ÎÂ¶È×ª»»
   \   000016                ; Setup parameters for call to function OneWire_WriteByte
   \   000016   7944         MOV     R1,#0x44
   \   000018   12....       LCALL   ??OneWire_WriteByte?relay
    253          
    254              // 2. µÈ´ý×ª»»Íê³É£¨×èÈûÊ½µÈ´ý£©
    255              delay_us(750000);          // 750ms£¨12Î»¾«¶È£©
                              ^
Warning[Pe069]: integer conversion resulted in truncation
   \   00001B                ; Setup parameters for call to function delay_us
   \   00001B   7AB0         MOV     R2,#-0x50
   \   00001D   7B71         MOV     R3,#0x71
   \   00001F   12....       LCALL   ??delay_us?relay
    256              
    257              if (!DS18B20_Reset()) return 0x7FFF;
   \   000022                ; Setup parameters for call to function DS18B20_Reset
   \   000022   12....       LCALL   ??DS18B20_Reset?relay
   \   000025   E9           MOV     A,R1
   \   000026   60E3         JZ      ??DS18B20_GetTemperature_1
    258              
    259              // 3. ¶ÁÈ¡ÎÂ¶ÈÊý¾Ý
    260              OneWire_WriteByte(0xCC);   // Skip ROM
   \   000028                ; Setup parameters for call to function OneWire_WriteByte
   \   000028   79CC         MOV     R1,#-0x34
   \   00002A   12....       LCALL   ??OneWire_WriteByte?relay
    261              OneWire_WriteByte(0xBE);   // ¶ÁÔÝ´æÆ÷ÃüÁî
   \   00002D                ; Setup parameters for call to function OneWire_WriteByte
   \   00002D   79BE         MOV     R1,#-0x42
   \   00002F   12....       LCALL   ??OneWire_WriteByte?relay
    262          
    263              // 4. ¶ÁÈ¡ÎÂ¶ÈµÍ×Ö½ÚºÍ¸ß×Ö½Ú
    264              temp_low = OneWire_ReadByte();
   \   000032                ; Setup parameters for call to function OneWire_ReadByte
   \   000032   12....       LCALL   ??OneWire_ReadByte?relay
   \   000035   E9           MOV     A,R1
   \   000036   F5..         MOV     ?V0 + 0,A
    265              temp_high = OneWire_ReadByte();
   \   000038                ; Setup parameters for call to function OneWire_ReadByte
   \   000038   12....       LCALL   ??OneWire_ReadByte?relay
    266          
    267              // 5. ºÏ²¢Îª16Î»Ô­Ê¼ÎÂ¶ÈÖµ
    268              temp_raw = (temp_high << 8) | temp_low;
   \   00003B   A8..         MOV     R0,?V0 + 0
   \   00003D   E9           MOV     A,R1
    269          
    270              // 6. ´¦Àí¸ºÎÂ¶È£¨²¹Âë×ª»»£©
    271              if (temp_high & 0x80) {     // ÅÐ¶Ï·ûºÅÎ»
   \   00003E   A2E7         MOV     C,0xE0 /* A   */.7
   \   000040   5015         JNC     ??DS18B20_GetTemperature_3
    272                  temp_raw = ~temp_raw + 1; // È¡·´¼Ó1µÃµ½²¹Âë
    273                  temp_raw = -temp_raw;    
   \   000042   E8           MOV     A,R0
   \   000043   F4           CPL     A
   \   000044   FA           MOV     R2,A
   \   000045   E9           MOV     A,R1
   \   000046   F4           CPL     A
   \   000047   FB           MOV     R3,A
   \   000048   EA           MOV     A,R2
   \   000049   2401         ADD     A,#0x1
   \   00004B   F8           MOV     R0,A
   \   00004C   EB           MOV     A,R3
   \   00004D   3400         ADDC    A,#0x0
   \   00004F   F9           MOV     R1,A
   \   000050   C3           CLR     C
   \   000051   E4           CLR     A
   \   000052   98           SUBB    A,R0
   \   000053   F8           MOV     R0,A
   \   000054   E4           CLR     A
   \   000055   99           SUBB    A,R1
   \   000056   F9           MOV     R1,A
    274              }
    275              if (temp_raw == 0xFFFF) {
   \                     ??DS18B20_GetTemperature_3:
   \   000057   74FF         MOV     A,#-0x1
   \   000059   68           XRL     A,R0
   \   00005A   7003         JNZ     ??DS18B20_GetTemperature_4
   \   00005C   74FF         MOV     A,#-0x1
   \   00005E   69           XRL     A,R1
   \                     ??DS18B20_GetTemperature_4:
   \   00005F   60AA         JZ      ??DS18B20_GetTemperature_1
    276                  return 0x7FFF;  // Èç¹ûÔ­Ê¼ÎÂ¶ÈÖµÊÇ0xFFFF£¬±íÊ¾¶ÁÈ¡´íÎó£¬·µ»Ø´íÎóÂë
    277              }
    278               return (uint16)(temp_raw * 6.25); // 0.0625 ¡Á 100 = 6.25
   \   000061   88..         MOV     ?V0 + 0,R0
   \   000063   E9           MOV     A,R1
   \   000064   F5..         MOV     ?V0 + 1,A
   \   000066   33           RLC     A
   \   000067   95E0         SUBB    A,0xE0 /* A   */
   \   000069   F5..         MOV     ?V0 + 2,A
   \   00006B   F5..         MOV     ?V0 + 3,A
   \   00006D   78..         MOV     R0,#?V0 + 0
   \   00006F   12....       LCALL   ?L_TO_FLT
   \   000072   90....       MOV     DPTR,#__Constant_40c80000
   \   000075   78..         MOV     R0,#?V0 + 4
   \   000077   12....       LCALL   ?L_MOV_X
   \   00007A   78..         MOV     R0,#?V0 + 0
   \   00007C   79..         MOV     R1,#?V0 + 4
   \   00007E   12....       LCALL   ?FLT_MUL
   \   000081   78..         MOV     R0,#?V0 + 0
   \   000083   12....       LCALL   ?FLT_TO_L
   \   000086   AA..         MOV     R2,?V0 + 0
   \   000088   AB..         MOV     R3,?V0 + 1
   \                     ??DS18B20_GetTemperature_2:
   \   00008A                REQUIRE ?Subroutine1
   \   00008A                ; // Fall through to label ?Subroutine1
    279          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    280          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    281          uint16 ReadlightData( void )
   \                     ReadlightData:
    282          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    283            uint16 reading = 0;
    284            
    285            /* Enable channel */
    286            ADCCFG |= 0x40;
   \   000000   43F240       ORL     0xf2,#0x40
    287            
    288            /* writing to this register starts the extra conversion */
    289            ADCCON3 = 0x86;// AVDD5 Òý½Å  00£º 64 ³éÈ¡ÂÊ(7 Î»ENOB)  0110£º AIN6
   \   000003   75B686       MOV     0xb6,#-0x7a
    290            
    291            /* Wait for the conversion to be done */
    292            while (!(ADCCON1 & 0x80));
   \                     ??ReadlightData_0:
   \   000006   E5B4         MOV     A,0xb4
   \   000008   A2E7         MOV     C,0xE0 /* A   */.7
   \   00000A   50FA         JNC     ??ReadlightData_0
    293            
    294            /* Disable channel after done conversion */
    295            ADCCFG &= (0x40 ^ 0xFF); //°´Î»Òì»ò¡£Èç1010^1111=0101£¨¶þ½øÖÆ£©
   \   00000C   53F2BF       ANL     0xf2,#0xbf
    296            
    297            /* Read the result */
    298            reading = ADCL;
   \   00000F   E5BA         MOV     A,0xba
    299            reading |= (int16) (ADCH << 8); 
    300            
    301            reading >>= 8;
    302            
    303            return (reading);
   \   000011   E5BB         MOV     A,0xbb
   \   000013   FA           MOV     R2,A
   \   000014   E4           CLR     A
   \   000015   FB           MOV     R3,A
   \   000016   02....       LJMP    ?BRET
   \   000019                REQUIRE ADCCFG
   \   000019                REQUIRE ADCCON3
   \   000019                REQUIRE ADCCON1
   \   000019                REQUIRE ADCL
   \   000019                REQUIRE ADCH
    304          }
    305          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    306          void UartSendString(char *Data, int len)
   \                     UartSendString:
    307          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    308            unsigned int i;
    309            
    310            for(i=0; i<len; i++)
   \   000005   7800         MOV     R0,#0x0
   \   000007   7900         MOV     R1,#0x0
   \   000009   801A         SJMP    ??UartSendString_0
    311            {
    312              U0DBUF = *Data++;
   \                     ??UartSendString_1:
   \   00000B   8A82         MOV     DPL,R2
   \   00000D   8B83         MOV     DPH,R3
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F5C1         MOV     0xc1,A
   \   000012   A3           INC     DPTR
   \   000013   AA82         MOV     R2,DPL
   \   000015   AB83         MOV     R3,DPH
    313              while(UTX0IF == 0);
   \                     ??UartSendString_2:
   \   000017   A2E9         MOV     C,0xe8.1
   \   000019   50FC         JNC     ??UartSendString_2
    314              UTX0IF = 0;
   \   00001B   C2E9         CLR     0xe8.1
    315            }
   \   00001D   E8           MOV     A,R0
   \   00001E   2401         ADD     A,#0x1
   \   000020   08           INC     R0
   \   000021   E9           MOV     A,R1
   \   000022   3400         ADDC    A,#0x0
   \   000024   F9           MOV     R1,A
   \                     ??UartSendString_0:
   \   000025   C3           CLR     C
   \   000026   E8           MOV     A,R0
   \   000027   9C           SUBB    A,R4
   \   000028   E9           MOV     A,R1
   \   000029   9D           SUBB    A,R5
   \   00002A   40DF         JC      ??UartSendString_1
    316          }
   \   00002C   02....       LJMP    ??Subroutine8_0 & 0xFFFF
   \   00002F                REQUIRE U0DBUF
   \   00002F                REQUIRE _A_IRCON2
    317          /*********************************************************************
    318           * @fn      SampleApp_Init
    319           *
    320           * @brief   Initialization function for the Generic App Task.
    321           *          This is called during initialization and should contain
    322           *          any application specific initialization (ie. hardware
    323           *          initialization/setup, table initialization, power up
    324           *          notificaiton ... ).
    325           *
    326           * @param   task_id - the ID assigned by OSAL.  This ID should be
    327           *                    used to send messages and set timers.
    328           *
    329           * @return  none
    330           */
    331          
    332          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    333          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    334          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    335            SampleApp_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    336            SampleApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    337            SampleApp_TransID = 0;
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    338            
    339            P1SEL &= ~0x07;//³õÊ¼»¯LED,Êä³öÄ£Ê½
   \   000016   53F4F8       ANL     0xf4,#0xf8
    340            P1DIR |= 0x07;
   \   000019   43FE07       ORL     0xfe,#0x7
    341            
    342            // ³õÊ¼»¯´úÂëÖÐÅäÖÃGPIOÄ£Ê½
    343            P0SEL &= ~0x80;   // È·±£P0.7ÎªGPIOÄ£Ê½
   \   00001C   53F37F       ANL     0xf3,#0x7f
    344            P0INP |= 0x80;    // ÉèÖÃÎªÈýÌ¬Ä£Ê½£¨¿ªÂ©£©
   \   00001F   438F80       ORL     0x8f,#0x80
    345            P0DIR |= 0x80;    // ³õÊ¼»¯ÎªÊä³öÄ£Ê½
   \   000022   43FD80       ORL     0xfd,#0x80
    346            P0_7=1;
   \   000025   D287         SETB    0x80.7
    347            // Device hardware initialization can be added here or in main() (Zmain.c).
    348            // If the hardware is application specific - add it here.
    349            // If the hardware is other parts of the device add it in main().
    350            MT_UartInit();  //´®¿Ú³õÊ¼»¯
   \   000027                ; Setup parameters for call to function MT_UartInit
   \   000027   12....       LCALL   ??MT_UartInit?relay
    351            MT_UartRegisterTaskID(task_id); //ÀûÓÃÓï¾äApp_TaskID = taskID½«UART×¢²áÔÚÓ¦ÓÃ²ãÉÏ£¬Èô·¢Éú´®¿ÚÊÂ¼þ£¬Ôò
   \   00002A                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   00002A   EE           MOV     A,R6
   \   00002B   F9           MOV     R1,A
   \   00002C   12....       LCALL   ??MT_UartRegisterTaskID?relay
    352          //ÔÚÓ¦ÓÃ²ãÉÏ´¦Àí£¬ÔÚºóÃæµÄµÚ17²½Ö´ÐÐº¯ÊýMT_UartProcessZToolData»áÓÃµ½
    353            
    354            
    355            
    356           #if defined ( BUILD_ALL_DEVICES )
    357            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    358            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    359            // together - if they are - we will start up a coordinator. Otherwise,
    360            // the device will start as a router.
    361            if ( readCoordinatorJumper() )
    362              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    363            else
    364              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    365          #endif // BUILD_ALL_DEVICES
    366          
    367          #if defined ( HOLD_AUTO_START )
    368            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    369            //  from starting the device and wait for the application to
    370            //  start the device.
    371            ZDOInitDevice(0);
    372          #endif
    373          
    374            // Setup for the periodic message's destination address
    375            // Broadcast to everyone
    376            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00002F   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000032   740F         MOV     A,#0xf
   \   000034   F0           MOVX    @DPTR,A
    377            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000035   A3           INC     DPTR
   \   000036   7414         MOV     A,#0x14
   \   000038   F0           MOVX    @DPTR,A
    378            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   000039   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   00003C   74FF         MOV     A,#-0x1
   \   00003E   F0           MOVX    @DPTR,A
   \   00003F   A3           INC     DPTR
   \   000040   F0           MOVX    @DPTR,A
    379          
    380            // Setup for the flash command's destination address - Group 1
    381            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000041   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000044   7401         MOV     A,#0x1
   \   000046   F0           MOVX    @DPTR,A
    382            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000047   A3           INC     DPTR
   \   000048   7414         MOV     A,#0x14
   \   00004A   F0           MOVX    @DPTR,A
    383            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   00004B   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   00004E   7401         MOV     A,#0x1
   \   000050   F0           MOVX    @DPTR,A
   \   000051   A3           INC     DPTR
   \   000052   E4           CLR     A
   \   000053   F0           MOVX    @DPTR,A
    384          
    385            // Fill out the endpoint description.
    386            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   000054   90....       MOV     DPTR,#SampleApp_epDesc
   \   000057   7414         MOV     A,#0x14
   \   000059   F0           MOVX    @DPTR,A
    387            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   00005A   A3           INC     DPTR
   \   00005B   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   00005D   F0           MOVX    @DPTR,A
   \   00005E   A3           INC     DPTR
   \   00005F   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   000061   F0           MOVX    @DPTR,A
    388            SampleApp_epDesc.simpleDesc
    389                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   000062   A3           INC     DPTR
   \   000063   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   000065   F0           MOVX    @DPTR,A
   \   000066   A3           INC     DPTR
   \   000067   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000069   F0           MOVX    @DPTR,A
    390            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   00006A   A3           INC     DPTR
   \   00006B   E4           CLR     A
   \   00006C   F0           MOVX    @DPTR,A
    391          
    392            // Register the endpoint description with the AF
    393            afRegister( &SampleApp_epDesc );
   \   00006D                ; Setup parameters for call to function afRegister
   \   00006D   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   00006F   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   000071   12....       LCALL   ??afRegister?relay
    394          
    395            // Register for all key events - This app will handle all key events
    396            RegisterForKeys( SampleApp_TaskID );
   \   000074                ; Setup parameters for call to function RegisterForKeys
   \   000074   90....       MOV     DPTR,#SampleApp_TaskID
   \   000077   E0           MOVX    A,@DPTR
   \   000078   F9           MOV     R1,A
   \   000079   12....       LCALL   ??RegisterForKeys?relay
    397          
    398            // By default, all devices start out in Group 1
    399            SampleApp_Group.ID = 0x0001;
   \   00007C   90....       MOV     DPTR,#SampleApp_Group
   \   00007F   7401         MOV     A,#0x1
   \   000081   F0           MOVX    @DPTR,A
   \   000082   A3           INC     DPTR
   \   000083   E4           CLR     A
   \   000084   F0           MOVX    @DPTR,A
    400            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );
   \   000085                ; Setup parameters for call to function osal_memcpy
   \   000085   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   000088   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   00008B   F5..         MOV     ?V0 + 2,A
   \   00008D   78..         MOV     R0,#?V0 + 0
   \   00008F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000092   7C07         MOV     R4,#0x7
   \   000094   7D00         MOV     R5,#0x0
   \   000096   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   000098   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   00009A   12....       LCALL   ??osal_memcpy?relay
   \   00009D   7403         MOV     A,#0x3
   \   00009F   12....       LCALL   ?DEALLOC_XSTACK8
    401            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   0000A2                ; Setup parameters for call to function aps_AddGroup
   \   0000A2   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000A4   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000A6   7914         MOV     R1,#0x14
   \   0000A8   12....       LCALL   ??aps_AddGroup?relay
    402          
    403          #if defined ( LCD_SUPPORTED )
    404            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
    405          #endif
    406          }
   \   0000AB   7F03         MOV     R7,#0x3
   \   0000AD   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000B0                REQUIRE P1SEL
   \   0000B0                REQUIRE P1DIR
   \   0000B0                REQUIRE P0SEL
   \   0000B0                REQUIRE P0INP
   \   0000B0                REQUIRE P0DIR
   \   0000B0                REQUIRE _A_P0
    407          
    408          
    409          
    410          /*********************************************************************
    411           * @fn      SampleApp_ProcessEvent
    412           *
    413           * @brief   Generic Application Task event processor.  This function
    414           *          is called to process all events for the task.  Events
    415           *          include timers, messages and any other user defined events.
    416           *
    417           * @param   task_id  - The OSAL assigned task ID.
    418           * @param   events - events to process.  This is a bit map and can
    419           *                   contain more than one event.
    420           *
    421           * @return  none
    422           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    423          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    424          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    425            afIncomingMSGPacket_t *MSGpkt;
    426            (void)task_id;  // Intentionally unreferenced parameter
    427          
    428            if ( events & SYS_EVENT_MSG )
   \   00000E   5480         ANL     A,#0x80
   \   000010   606C         JZ      ??SampleApp_ProcessEvent_0
    429            {
    430              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000012                ; Setup parameters for call to function osal_msg_receive
   \   000012   801D         SJMP    ??SampleApp_ProcessEvent_1
    431              while ( MSGpkt )
    432              {
    433                switch ( MSGpkt->hdr.event )
    434                {
    435                  // Received when a key is pressed
    436                  case KEY_CHANGE:
    437                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    438                    break;
    439          
    440                  // Received when a messages is received (OTA) for this endpoint
    441                  case AF_INCOMING_MSG_CMD:
    442                      SampleApp_MessageMSGCB( MSGpkt );
    443                    break;
    444          
    445                  // Received whenever the device changes state in the network
    446                  case ZDO_STATE_CHANGE:
    447                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   90....       MOV     DPTR,#SampleApp_NwkState
   \   000019   F0           MOVX    @DPTR,A
    448                    
    449                      // Start sending the periodic message in a regular interval.
    450                      osal_start_timerEx( SampleApp_TaskID,
    451                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    452                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \   00001A                ; Setup parameters for call to function osal_start_timerEx
   \   00001A   7C88         MOV     R4,#-0x78
   \   00001C   7D13         MOV     R5,#0x13
   \   00001E   7A01         MOV     R2,#0x1
   \   000020   7B00         MOV     R3,#0x0
   \   000022   90....       MOV     DPTR,#SampleApp_TaskID
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F9           MOV     R1,A
   \   000027   12....       LCALL   ??osal_start_timerEx?relay
    453                    
    454                   
    455                    break;
    456                    
    457                  case CMD_SERIAL_MSG: //´®¿ÚÊÕµ½Êý¾ÝºóÓÉ MT_UART ²ã´«µÝ¹ýÀ´µÄ/Êý¾Ý£¬±àÒëÊ±²»¶¨
    458                                         //Òå MTÏà¹ØÄÚÈÝ
    459                     SampleApp_SerialCMD((mtOSALSerialData_t *)MSGpkt);
    460                     break;
    461                    
    462                    
    463                    
    464                  default:
    465                    break;
    466                }
    467          
    468                // Release the memory
    469                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_3:
   \   00002A                ; Setup parameters for call to function osal_msg_deallocate
   \   00002A   AA..         MOV     R2,?V0 + 0
   \   00002C   AB..         MOV     R3,?V0 + 1
   \   00002E   12....       LCALL   ??osal_msg_deallocate?relay
    470          
    471                // Next - if one is available
    472                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000031                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000031   90....       MOV     DPTR,#SampleApp_TaskID
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F9           MOV     R1,A
   \   000036   12....       LCALL   ??osal_msg_receive?relay
   \   000039   8A..         MOV     ?V0 + 0,R2
   \   00003B   8B..         MOV     ?V0 + 1,R3
   \   00003D   E5..         MOV     A,?V0 + 0
   \   00003F   45..         ORL     A,?V0 + 1
   \   000041   6032         JZ      ??SampleApp_ProcessEvent_4
   \   000043   85..82       MOV     DPL,?V0 + 0
   \   000046   85..83       MOV     DPH,?V0 + 1
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   24E6         ADD     A,#-0x1a
   \   00004C   601E         JZ      ??SampleApp_ProcessEvent_5
   \   00004E   245A         ADD     A,#0x5a
   \   000050   6006         JZ      ??SampleApp_ProcessEvent_6
   \   000052   24EF         ADD     A,#-0x11
   \   000054   60BE         JZ      ??SampleApp_ProcessEvent_2
   \   000056   80D2         SJMP    ??SampleApp_ProcessEvent_3
   \                     ??SampleApp_ProcessEvent_6:
   \   000058                ; Setup parameters for call to function SampleApp_HandleKeys
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   FA           MOV     R2,A
   \   00005D   85..82       MOV     DPL,?V0 + 0
   \   000060   85..83       MOV     DPH,?V0 + 1
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   E0           MOVX    A,@DPTR
   \   000066   F9           MOV     R1,A
   \   000067   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   00006A   80BE         SJMP    ??SampleApp_ProcessEvent_3
   \                     ??SampleApp_ProcessEvent_5:
   \   00006C                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   00006C   AA..         MOV     R2,?V0 + 0
   \   00006E   AB..         MOV     R3,?V0 + 1
   \   000070   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   000073   80B5         SJMP    ??SampleApp_ProcessEvent_3
    473              }
    474          
    475              // return unprocessed events
    476              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_4:
   \   000075   EE           MOV     A,R6
   \   000076   FA           MOV     R2,A
   \   000077   EF           MOV     A,R7
   \   000078   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_7:
   \   00007A   FB           MOV     R3,A
   \   00007B   02....       LJMP    ??SampleApp_ProcessEvent_8 & 0xFFFF
    477            }
    478          
    479            // Send a message out - This event is generated by a timer
    480            //  (setup in SampleApp_Init()).
    481            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   00007E   EE           MOV     A,R6
   \   00007F   A2E0         MOV     C,0xE0 /* A   */.0
   \   000081   4003         JC      $+5
   \   000083   02....       LJMP    ??SampleApp_ProcessEvent_9 & 0xFFFF
    482            { 
    483              
    484               uint16 temperature = DS18B20_GetTemperature();
   \   000086                ; Setup parameters for call to function DS18B20_GetTemperature
   \   000086   12....       LCALL   ??DS18B20_GetTemperature?relay
   \   000089   8A..         MOV     ?V0 + 0,R2
   \   00008B   8B..         MOV     ?V0 + 1,R3
    485               char temp_str[10];
    486               if (temperature == 0x7FFF) {
   \   00008D   74FF         MOV     A,#-0x1
   \   00008F   65..         XRL     A,?V0 + 0
   \   000091   7004         JNZ     ??SampleApp_ProcessEvent_10
   \   000093   747F         MOV     A,#0x7f
   \   000095   65..         XRL     A,?V0 + 1
   \                     ??SampleApp_ProcessEvent_10:
   \   000097   7013         JNZ     ??SampleApp_ProcessEvent_11
    487                      sprintf(temp_str, "ERROR");
   \   000099                ; Setup parameters for call to function sprintf
   \   000099   7C..         MOV     R4,#`?<Constant "ERROR">` & 0xff
   \   00009B   7D..         MOV     R5,#(`?<Constant "ERROR">` >> 8) & 0xff
   \   00009D   85..82       MOV     DPL,?XSP + 0
   \   0000A0   85..83       MOV     DPH,?XSP + 1
   \   0000A3   AA82         MOV     R2,DPL
   \   0000A5   AB83         MOV     R3,DPH
   \   0000A7   12....       LCALL   ??sprintf?relay
   \   0000AA   804B         SJMP    ??SampleApp_ProcessEvent_12
    488                  } else {
    489                      sprintf(temp_str, "%d.%01d", 
    490                          temperature / 100, 
    491                          (abs(temperature % 100)/10));
   \                     ??SampleApp_ProcessEvent_11:
   \   0000AC                ; Setup parameters for call to function sprintf
   \   0000AC                ; Setup parameters for call to function abs
   \   0000AC   A8..         MOV     R0,?V0 + 0
   \   0000AE   A9..         MOV     R1,?V0 + 1
   \   0000B0   7A64         MOV     R2,#0x64
   \   0000B2   7B00         MOV     R3,#0x0
   \   0000B4   12....       LCALL   ?US_DIV_MOD
   \   0000B7   12....       LCALL   ??abs?relay
   \   0000BA   EA           MOV     A,R2
   \   0000BB   F8           MOV     R0,A
   \   0000BC   EB           MOV     A,R3
   \   0000BD   F9           MOV     R1,A
   \   0000BE   7A0A         MOV     R2,#0xa
   \   0000C0   7B00         MOV     R3,#0x0
   \   0000C2   12....       LCALL   ?S_DIV_MOD
   \   0000C5   88..         MOV     ?V0 + 2,R0
   \   0000C7   89..         MOV     ?V0 + 3,R1
   \   0000C9   78..         MOV     R0,#?V0 + 2
   \   0000CB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000CE   A8..         MOV     R0,?V0 + 0
   \   0000D0   A9..         MOV     R1,?V0 + 1
   \   0000D2   7A64         MOV     R2,#0x64
   \   0000D4   7B00         MOV     R3,#0x0
   \   0000D6   12....       LCALL   ?US_DIV_MOD
   \   0000D9   88..         MOV     ?V0 + 0,R0
   \   0000DB   89..         MOV     ?V0 + 1,R1
   \   0000DD   78..         MOV     R0,#?V0 + 0
   \   0000DF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E2   7C..         MOV     R4,#`?<Constant "%d.%01d">` & 0xff
   \   0000E4   7D..         MOV     R5,#(`?<Constant "%d.%01d">` >> 8) & 0xff
   \   0000E6   7404         MOV     A,#0x4
   \   0000E8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EB   AA82         MOV     R2,DPL
   \   0000ED   AB83         MOV     R3,DPH
   \   0000EF   12....       LCALL   ??sprintf?relay
   \   0000F2   7404         MOV     A,#0x4
   \   0000F4   12....       LCALL   ?DEALLOC_XSTACK8
    492                  }
    493            
    494             AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    495                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    496                                strlen(temp_str),
    497                                 (uint8*)temp_str,
    498                                 &SampleApp_TransID,
    499                                 AF_DISCV_ROUTE,
    500                                 AF_DEFAULT_RADIUS );
   \                     ??SampleApp_ProcessEvent_12:
   \   0000F7                ; Setup parameters for call to function AF_DataRequest
   \   0000F7   75..1E       MOV     ?V0 + 0,#0x1e
   \   0000FA   78..         MOV     R0,#?V0 + 0
   \   0000FC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000FF   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000102   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000105   78..         MOV     R0,#?V0 + 0
   \   000107   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00010A   7403         MOV     A,#0x3
   \   00010C   12....       LCALL   ?XSTACK_DISP0_8
   \   00010F   8582..       MOV     ?V0 + 0,DPL
   \   000112   8583..       MOV     ?V0 + 1,DPH
   \   000115   78..         MOV     R0,#?V0 + 0
   \   000117   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00011A                ; Setup parameters for call to function strlen
   \   00011A   7405         MOV     A,#0x5
   \   00011C   12....       LCALL   ?XSTACK_DISP0_8
   \   00011F   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000122   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000125   75..01       MOV     ?V0 + 0,#0x1
   \   000128   75..00       MOV     ?V0 + 1,#0x0
   \   00012B   78..         MOV     R0,#?V0 + 0
   \   00012D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000130   7920         MOV     R1,#0x20
   \   000132   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000134   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000136   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   000138   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00013A   12....       LCALL   ??AF_DataRequest?relay
   \   00013D   7409         MOV     A,#0x9
   \   00013F   12....       LCALL   ?DEALLOC_XSTACK8
    501               
    502              lightData = ReadlightData();  
   \   000142                ; Setup parameters for call to function ReadlightData
   \   000142   12....       LCALL   ??ReadlightData?relay
   \   000145   90....       MOV     DPTR,#lightData
   \   000148   EA           MOV     A,R2
   \   000149   F0           MOVX    @DPTR,A
   \   00014A   A3           INC     DPTR
   \   00014B   EB           MOV     A,R3
   \   00014C   F0           MOVX    @DPTR,A
    503              
    504           char light_str[10];
    505          sprintf(light_str, "%d", lightData);
   \   00014D                ; Setup parameters for call to function sprintf
   \   00014D   90....       MOV     DPTR,#lightData
   \   000150   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000153   7C..         MOV     R4,#`?<Constant "%d">` & 0xff
   \   000155   7D..         MOV     R5,#(`?<Constant "%d">` >> 8) & 0xff
   \   000157   740C         MOV     A,#0xc
   \   000159   12....       LCALL   ?XSTACK_DISP0_8
   \   00015C   AA82         MOV     R2,DPL
   \   00015E   AB83         MOV     R3,DPH
   \   000160   12....       LCALL   ??sprintf?relay
   \   000163   7402         MOV     A,#0x2
   \   000165   12....       LCALL   ?DEALLOC_XSTACK8
    506          
    507              AF_DataRequest(&SampleApp_Flash_DstAddr,&SampleApp_epDesc,
    508              SAMPLEAPP_FLASH_CLUSTERID,
    509              strlen(light_str),
    510              light_str,
                     ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
    511              &SampleApp_TransID,
    512              AF_DISCV_ROUTE,
    513              AF_DEFAULT_RADIUS); 
   \   000168                ; Setup parameters for call to function AF_DataRequest
   \   000168   75..1E       MOV     ?V0 + 0,#0x1e
   \   00016B   78..         MOV     R0,#?V0 + 0
   \   00016D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000170   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000173   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000176   78..         MOV     R0,#?V0 + 0
   \   000178   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00017B   740D         MOV     A,#0xd
   \   00017D   12....       LCALL   ?XSTACK_DISP0_8
   \   000180   8582..       MOV     ?V0 + 0,DPL
   \   000183   8583..       MOV     ?V0 + 1,DPH
   \   000186   78..         MOV     R0,#?V0 + 0
   \   000188   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00018B                ; Setup parameters for call to function strlen
   \   00018B   740F         MOV     A,#0xf
   \   00018D   12....       LCALL   ?XSTACK_DISP0_8
   \   000190   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000193   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000196   75..02       MOV     ?V0 + 0,#0x2
   \   000199   75..00       MOV     ?V0 + 1,#0x0
   \   00019C   78..         MOV     R0,#?V0 + 0
   \   00019E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001A1   7920         MOV     R1,#0x20
   \   0001A3   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   0001A5   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   0001A7   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   0001A9   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   0001AB   12....       LCALL   ??AF_DataRequest?relay
   \   0001AE   7409         MOV     A,#0x9
   \   0001B0   12....       LCALL   ?DEALLOC_XSTACK8
    514              
    515              // Setup to send message again in normal period (+ a little jitter)
    516              
    517              
    518              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    519                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   0001B3                ; Setup parameters for call to function osal_rand
   \   0001B3   12....       LCALL   ?Subroutine3 & 0xFFFF
    520          
    521              // return unprocessed events
    522              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \                     ??CrossCallReturnLabel_0:
   \   0001B6   EE           MOV     A,R6
   \   0001B7   6401         XRL     A,#0x1
   \   0001B9   FA           MOV     R2,A
   \   0001BA   EF           MOV     A,R7
   \   0001BB   02....       LJMP    ??SampleApp_ProcessEvent_7 & 0xFFFF
    523            }
    524          
    525            // Discard unknown events
    526            return 0;
   \                     ??SampleApp_ProcessEvent_9:
   \   0001BE   7A00         MOV     R2,#0x0
   \   0001C0   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_8:
   \   0001C2   7414         MOV     A,#0x14
   \   0001C4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001C7   7F04         MOV     R7,#0x4
   \   0001C9   02....       LJMP    ?BANKED_LEAVE_XDATA
    527          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   AA82         MOV     R2,DPL
   \   000002   AB83         MOV     R3,DPH
   \   000004   12....       LCALL   ??strlen?relay
   \   000007   8A..         MOV     ?V0 + 0,R2
   \   000009   8B..         MOV     ?V0 + 1,R3
   \   00000B   78..         MOV     R0,#?V0 + 0
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ??osal_rand?relay
   \   000003                ; Setup parameters for call to function osal_start_timerEx
   \   000003                ; Setup parameters for call to function osal_start_timerEx
   \   000003   EA           MOV     A,R2
   \   000004   2488         ADD     A,#-0x78
   \   000006   FC           MOV     R4,A
   \   000007   E4           CLR     A
   \   000008   3413         ADDC    A,#0x13
   \   00000A   FD           MOV     R5,A
   \   00000B   7A01         MOV     R2,#0x1
   \   00000D   7B00         MOV     R3,#0x0
   \   00000F   90....       MOV     DPTR,#SampleApp_TaskID
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F9           MOV     R1,A
   \   000014   12....       LCALL   ??osal_start_timerEx?relay
   \   000017   22           RET
    528          
    529          /*********************************************************************
    530           * Event Generation Functions
    531           */
    532          /*********************************************************************
    533           * @fn      SampleApp_HandleKeys
    534           *
    535           * @brief   Handles all key events for this device.
    536           *
    537           * @param   shift - true if in shift/alt.
    538           * @param   keys - bit field for key events. Valid entries:
    539           *                 HAL_KEY_SW_2
    540           *                 HAL_KEY_SW_1
    541           *
    542           * @return  none
    543           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    544          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    545          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
    546            (void)shift;  // Intentionally unreferenced parameter
    547            
    548            if ( keys & HAL_KEY_SW_6 )//S1
   \   000006   A2E5         MOV     C,0xE0 /* A   */.5
   \   000008   5003         JNC     ??CrossCallReturnLabel_1
    549            {
    550               osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    551                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   00000A                ; Setup parameters for call to function osal_rand
   \   00000A   12....       LCALL   ?Subroutine3 & 0xFFFF
    552            }
    553            if ( keys & HAL_KEY_SW_7 )//S2
    554            {
    555            
    556             
    557            
    558            }
    559          }
   \                     ??CrossCallReturnLabel_1:
   \   00000D                REQUIRE ?Subroutine2
   \   00000D                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    560          
    561          /*********************************************************************
    562           * LOCAL FUNCTIONS
    563           */
    564          
    565          /*********************************************************************
    566           * @fn      SampleApp_MessageMSGCB
    567           *
    568           * @brief   Data message processor callback.  This function processes
    569           *          any incoming data - probably from other devices.  So, based
    570           *          on cluster ID, perform the intended action.
    571           *
    572           * @param   none
    573           *
    574           * @return  none
    575           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    576          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    577          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 72
   \   000005   74B8         MOV     A,#-0x48
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    578            uint16 flashTime;
    579          
    580            switch ( pkt->clusterId )
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F5..         MOV     ?V0 + 0,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V0 + 1,A
   \   000019   78..         MOV     R0,#?V0 + 0
   \   00001B   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   00001E   0100         DW        1
   \   000020   01           DB        1
   \   000021   ....         DW        ??SampleApp_MessageMSGCB_0
   \   000023   ....         DW        ??SampleApp_MessageMSGCB_1
   \   000025   ....         DW        ??SampleApp_MessageMSGCB_2
    581            {
    582              case SAMPLEAPP_PERIODIC_CLUSTERID:
    583                char recvBuffer[32];
                       ^
Warning[Pe1072]: a declaration cannot have a label
    584                float humidityValue;
    585                char formattedStr[40];
    586                memcpy(recvBuffer, pkt->cmd.Data, pkt->cmd.DataLength);
   \                     ??SampleApp_MessageMSGCB_1:
   \   000027   EA           MOV     A,R2
   \   000028   2420         ADD     A,#0x20
   \   00002A   F8           MOV     R0,A
   \   00002B   EB           MOV     A,R3
   \   00002C   3400         ADDC    A,#0x0
   \   00002E   F9           MOV     R1,A
   \   00002F   E8           MOV     A,R0
   \   000030   FE           MOV     R6,A
   \   000031   E9           MOV     A,R1
   \   000032   FF           MOV     R7,A
   \   000033                ; Setup parameters for call to function memcpy
   \   000033   8E82         MOV     DPL,R6
   \   000035   8F83         MOV     DPH,R7
   \   000037   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00003A   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00003D   FC           MOV     R4,A
   \   00003E   A3           INC     DPTR
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   FD           MOV     R5,A
   \   000041   7402         MOV     A,#0x2
   \   000043   12....       LCALL   ?XSTACK_DISP0_8
   \   000046   AA82         MOV     R2,DPL
   \   000048   AB83         MOV     R3,DPH
   \   00004A   12....       LCALL   ??memcpy?relay
   \   00004D   7402         MOV     A,#0x2
   \   00004F   12....       LCALL   ?DEALLOC_XSTACK8
    587                recvBuffer[pkt->cmd.DataLength] = '\0'; 
   \   000052   8E82         MOV     DPL,R6
   \   000054   8F83         MOV     DPH,R7
   \   000056   E0           MOVX    A,@DPTR
   \   000057   F8           MOV     R0,A
   \   000058   A3           INC     DPTR
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   F9           MOV     R1,A
   \   00005B   85..82       MOV     DPL,?XSP + 0
   \   00005E   85..83       MOV     DPH,?XSP + 1
   \   000061   E582         MOV     A,DPL
   \   000063   28           ADD     A,R0
   \   000064   F582         MOV     DPL,A
   \   000066   E583         MOV     A,DPH
   \   000068   39           ADDC    A,R1
   \   000069   F583         MOV     DPH,A
   \   00006B   E4           CLR     A
   \   00006C   F0           MOVX    @DPTR,A
    588                humidityValue = atof(recvBuffer);
   \   00006D                ; Setup parameters for call to function atof
   \   00006D   85..82       MOV     DPL,?XSP + 0
   \   000070   85..83       MOV     DPH,?XSP + 1
   \   000073   AA82         MOV     R2,DPL
   \   000075   AB83         MOV     R3,DPH
   \   000077   12....       LCALL   ??atof?relay
   \   00007A   8A..         MOV     ?V0 + 0,R2
   \   00007C   8B..         MOV     ?V0 + 1,R3
   \   00007E   8C..         MOV     ?V0 + 2,R4
   \   000080   8D..         MOV     ?V0 + 3,R5
    589                sprintf(formattedStr, "soilHumidity: %.2f%%\n", humidityValue);
   \   000082                ; Setup parameters for call to function sprintf
   \   000082   78..         MOV     R0,#?V0 + 0
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000087   7C..         MOV     R4,#`?<Constant "soilHumidity: %.2f%%\\n">` & 0xff
   \   000089   7D..         MOV     R5,#(`?<Constant "soilHumidity: %.2f%%\\n">` >> 8) & 0xff
   \   00008B   7424         MOV     A,#0x24
   \   00008D   12....       LCALL   ?XSTACK_DISP0_8
   \   000090   AA82         MOV     R2,DPL
   \   000092   AB83         MOV     R3,DPH
   \   000094   12....       LCALL   ??sprintf?relay
   \   000097   7404         MOV     A,#0x4
   \   000099   12....       LCALL   ?DEALLOC_XSTACK8
    590                HalUARTWrite(0, formattedStr, strlen(formattedStr));
                                       ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   00009C                ; Setup parameters for call to function HalUARTWrite
   \   00009C                ; Setup parameters for call to function strlen
   \   00009C   7420         MOV     A,#0x20
   \   00009E   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A1   AA82         MOV     R2,DPL
   \   0000A3   AB83         MOV     R3,DPH
   \   0000A5   12....       LCALL   ??strlen?relay
   \   0000A8   EA           MOV     A,R2
   \   0000A9   FC           MOV     R4,A
   \   0000AA   EB           MOV     A,R3
   \   0000AB   FD           MOV     R5,A
   \   0000AC   7420         MOV     A,#0x20
   \   0000AE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B1   AA82         MOV     R2,DPL
   \   0000B3   AB83         MOV     R3,DPH
   \   0000B5   7900         MOV     R1,#0x0
   \   0000B7   12....       LCALL   ??HalUARTWrite?relay
    591          
    592          if (humidityValue < 60.0f) {
   \   0000BA   90....       MOV     DPTR,#__Constant_42700000
   \   0000BD   78..         MOV     R0,#?V0 + 4
   \   0000BF   12....       LCALL   ?L_MOV_X
   \   0000C2   78..         MOV     R0,#?V0 + 0
   \   0000C4   79..         MOV     R1,#?V0 + 4
   \   0000C6   12....       LCALL   ?FLT_LT
   \   0000C9   500C         JNC     ??SampleApp_MessageMSGCB_3
    593            P0SEL &= ~0x30;   
   \   0000CB   53F3CF       ANL     0xf3,#0xcf
    594            P0DIR |= 0x30;  
   \   0000CE   43FD30       ORL     0xfd,#0x30
    595            P0_5=1;
   \   0000D1   D285         SETB    0x80.5
    596            P0_4=0;
   \   0000D3   C284         CLR     0x80.4
   \   0000D5   8039         SJMP    ??SampleApp_MessageMSGCB_0
    597          } 
    598          else if (humidityValue >= 60.0f) {
    599              P0_5=1;
   \                     ??SampleApp_MessageMSGCB_3:
   \   0000D7   D285         SETB    0x80.5
    600              P0_4=1;
   \   0000D9   D284         SETB    0x80.4
   \   0000DB   8033         SJMP    ??SampleApp_MessageMSGCB_0
    601            
    602          } 
    603          
    604          
    605                break;
    606          
    607              case SAMPLEAPP_FLASH_CLUSTERID:
    608                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    609                 HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \                     ??SampleApp_MessageMSGCB_2:
   \   0000DD   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0000E0   F8           MOV     R0,A
   \   0000E1   A3           INC     DPTR
   \   0000E2   E0           MOVX    A,@DPTR
   \   0000E3   F9           MOV     R1,A
   \   0000E4                ; Setup parameters for call to function HalLedBlink
   \   0000E4   8882         MOV     DPL,R0
   \   0000E6   8983         MOV     DPH,R1
   \   0000E8   A3           INC     DPTR
   \   0000E9   E0           MOVX    A,@DPTR
   \   0000EA   FA           MOV     R2,A
   \   0000EB   8882         MOV     DPL,R0
   \   0000ED   8983         MOV     DPH,R1
   \   0000EF   A3           INC     DPTR
   \   0000F0   A3           INC     DPTR
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   F9           MOV     R1,A
   \   0000F3   EA           MOV     A,R2
   \   0000F4   2400         ADD     A,#0x0
   \   0000F6   F5..         MOV     ?V0 + 0,A
   \   0000F8   E4           CLR     A
   \   0000F9   39           ADDC    A,R1
   \   0000FA   F5..         MOV     ?V0 + 1,A
   \   0000FC   7402         MOV     A,#0x2
   \   0000FE   78..         MOV     R0,#?V0 + 0
   \   000100   12....       LCALL   ?US_SHR
   \   000103   AC..         MOV     R4,?V0 + 0
   \   000105   AD..         MOV     R5,?V0 + 1
   \   000107   7B32         MOV     R3,#0x32
   \   000109   7A04         MOV     R2,#0x4
   \   00010B   7908         MOV     R1,#0x8
   \   00010D   12....       LCALL   ??HalLedBlink?relay
    610                break;
    611            }
    612          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   000110   7448         MOV     A,#0x48
   \   000112   12....       LCALL   ?DEALLOC_XSTACK8
   \   000115   02....       LJMP    ?Subroutine1 & 0xFFFF
   \   000118                REQUIRE P0SEL
   \   000118                REQUIRE P0DIR
   \   000118                REQUIRE _A_P0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   EA           MOV     A,R2
   \   000001   2422         ADD     A,#0x22
   \   000003   F582         MOV     DPL,A
   \   000005   EB           MOV     A,R3
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET
    613          
    614          /*********************************************************************
    615           * @fn      SampleApp_SendPeriodicMessage
    616           *
    617           * @brief   Send the periodic message.
    618           *
    619           * @param   none
    620           *
    621           * @return  none
    622           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    623          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    624          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    625           
    626          }
   \   000000   02....       LJMP    ?BRET
    627          
    628          /*********************************************************************
    629           * @fn      SampleApp_SendFlashMessage
    630           *
    631           * @brief   Send the flash message to group 1.
    632           *
    633           * @param   flashTime - in milliseconds
    634           *
    635           * @return  none
    636           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    637          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    638          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    639            uint8 buffer[3];
    640            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    641            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    642            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   F0           MOVX    @DPTR,A
    643          
    644            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    645                                 SAMPLEAPP_FLASH_CLUSTERID,
    646                                 3,
    647                                 buffer,
    648                                 &SampleApp_TransID,
    649                                 AF_DISCV_ROUTE,
    650                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..1E       MOV     ?V0 + 0,#0x1e
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000034   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   8582..       MOV     ?V0 + 0,DPL
   \   000044   8583..       MOV     ?V0 + 1,DPH
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   75..03       MOV     ?V0 + 0,#0x3
   \   00004F   75..00       MOV     ?V0 + 1,#0x0
   \   000052   78..         MOV     R0,#?V0 + 0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   75..02       MOV     ?V0 + 0,#0x2
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   7920         MOV     R1,#0x20
   \   000061   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000063   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000065   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   000067   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000069   12....       LCALL   ??AF_DataRequest?relay
   \   00006C   7409         MOV     A,#0x9
   \   00006E   12....       LCALL   ?DEALLOC_XSTACK8
    651            {
    652            }
    653            else
    654            {
    655              // Error occurred in request to send.
    656            }
    657          }
   \   000071   7403         MOV     A,#0x3
   \   000073   12....       LCALL   ?DEALLOC_XSTACK8
   \   000076   02....       LJMP    ?Subroutine2 & 0xFFFF
    658          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    659          void SampleApp_SerialCMD(mtOSALSerialData_t *cmdMsg)
   \                     SampleApp_SerialCMD:
    660          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    661              uint8 i,len,*str=NULL; //len ÓÃÀ´´æ·ÅÊµ¼ÊÊý¾ÝµÄ³¤¶È£¨µ¥Î»Îª×Ö½Ú£©
                           ^
Warning[Pe177]: variable "i" was declared but never referenced

      uint8 i,len,*str=NULL; //len ÓÃÀ´´æ·ÅÊµ¼ÊÊý¾ÝµÄ³¤¶È£¨µ¥Î»Îª×Ö½Ú£©
              ^
"C:\Users\24631\Desktop\µç»ú\ÍÁÈÀÊª¶È\f\Projects\zstack\Samples\SampleApp\Source\Coor.c",661  Warning[Pe550]: 
          variable "len" was set but never used
    662              str=cmdMsg->msg; //Ö¸Ïò¼ÇÂ¼Êý¾Ý³¤¶ÈÄÇ¸ö×Ö½Ú
    663              len=*str; //msg ÀïµÄµÚ 1 ¸ö×Ö½Ú´ú±íºóÃæµÄÊý¾Ý³¤¶È
    664             // AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    665                               //  SAMPLEAPP_PERIODIC_CLUSTERID,
    666                               //  1,
    667                               //  str+1,
    668                               // &SampleApp_TransID,
    669                              //   AF_DISCV_ROUTE,
    670                               //  AF_DEFAULT_RADIUS );
    671              
    672          }
   \   000000   02....       LJMP    ?BRET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for temp1>`:
   \   000000   6C696768     DB "light"
   \            7400    

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for temp2>`:
   \   000000   6461726B     DB "dark"
   \            00      

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??delay_us?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    delay_us

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??DS18B20_Reset?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    DS18B20_Reset

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??OneWire_WriteByte?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    OneWire_WriteByte

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??OneWire_ReadByte?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    OneWire_ReadByte

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??DS18B20_GetTemperature?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    DS18B20_GetTemperature

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ReadlightData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ReadlightData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??UartSendString?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    UartSendString

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SerialCMD?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SerialCMD

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ERROR">`:
   \   000000   4552524F     DB "ERROR"
   \            5200    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%d.%01d">`:
   \   000000   25642E25     DB "%d.%01d"
   \            30316400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%d">`:
   \   000000   256400       DB "%d"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "soilHumidity: %.2f%%\\n">`:
   \   000000   736F696C     DB "soilHumidity: %.2f%%\012"
   \            48756D69
   \            64697479
   \            3A20252E
   \            32662525
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_40c80000:
   \   000000   0000C840     DD 40C80000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_42700000:
   \   000000   00007042     DD 42700000H
    673          
    674          /*********************************************************************
    675          *********************************************************************/

   Maximum stack usage in bytes:

     Function                      ISTACK PSTACK XSTACK
     --------                      ------ ------ ------
     DS18B20_GetTemperature            0      0     48
       -> DS18B20_Reset                0      0     32
       -> OneWire_WriteByte            0      0     32
       -> OneWire_WriteByte            0      0     32
       -> delay_us                     0      0     32
       -> DS18B20_Reset                0      0     32
       -> OneWire_WriteByte            0      0     32
       -> OneWire_WriteByte            0      0     32
       -> OneWire_ReadByte             0      0     32
       -> OneWire_ReadByte             0      0     32
     DS18B20_Reset                     0      0     25
       -> delay_us                     0      0     18
       -> delay_us                     0      0     18
       -> delay_us                     0      0     18
     OneWire_ReadByte                  0      0     25
       -> delay_us                     0      0     18
       -> delay_us                     0      0     18
       -> delay_us                     0      0     18
     OneWire_WriteByte                 0      0     25
       -> delay_us                     0      0     18
       -> delay_us                     0      0     18
     ReadlightData                     0      0     32
     SampleApp_HandleKeys              0      0     42
       -> osal_rand                    0      0     20
       -> osal_start_timerEx           0      0     20
     SampleApp_Init                    0      0     14
       -> MT_UartInit                  0      0     22
       -> MT_UartRegisterTaskID        0      0     22
       -> afRegister                   0      0     22
       -> RegisterForKeys              0      0     22
       -> osal_memcpy                  0      0     28
       -> aps_AddGroup                 0      0     22
     SampleApp_MessageMSGCB            0      0    124
       -> memcpy                       0      0    180
       -> atof                         0      0    176
       -> sprintf                      0      0    184
       -> strlen                       0      0    176
       -> HalUARTWrite                 0      0    176
       -> HalLedBlink                  0      0    176
     SampleApp_ProcessEvent            0      0     41
       -> osal_msg_receive             0      0     64
       -> osal_start_timerEx           0      0     64
       -> osal_msg_deallocate          0      0     64
       -> osal_msg_receive             0      0     64
       -> SampleApp_HandleKeys         0      0     64
       -> SampleApp_MessageMSGCB       0      0     64
       -> DS18B20_GetTemperature       0      0     64
       -> sprintf                      0      0     64
       -> abs                          0      0     64
       -> sprintf                      0      0     72
       -> strlen                       0      0     74
       -> AF_DataRequest               0      0     82
       -> ReadlightData                0      0     64
       -> sprintf                      0      0     68
       -> strlen                       0      0     74
       -> AF_DataRequest               0      0     82
       -> osal_rand                    0      0     64
       -> osal_start_timerEx           0      0     64
     SampleApp_SendFlashMessage        1      0     22
       -> AF_DataRequest               0      0     44
     SampleApp_SendPeriodicMessage     0      0      0
     SampleApp_SerialCMD               0      0      0
     UartSendString                    0      0      9
     delay_us                          0      0     16


   Segment part sizes:

     Function/Label                        Bytes
     --------------                        -----
     _A_P0                                    1
     P0INP                                    1
     ADCCON1                                  1
     ADCCON3                                  1
     ADCL                                     1
     ADCH                                     1
     U0DBUF                                   1
     _A_IRCON2                                1
     ADCCFG                                   1
     P0SEL                                    1
     P1SEL                                    1
     P0DIR                                    1
     P1DIR                                    1
     temp1                                    6
     temp2                                    5
     temp3                                    1
     TxBuf                                    5
     SampleApp_ClusterList                    4
     SampleApp_SimpleDesc                    12
     SampleApp_epDesc                         6
     SampleApp_TaskID                         1
     SampleApp_NwkState                       1
     SampleApp_TransID                        1
     SampleApp_Periodic_DstAddr              12
     SampleApp_Flash_DstAddr                 12
     SampleApp_Group                         18
     SampleAppPeriodicCounter                 1
     SampleAppFlashCounter                    1
     lightData                                2
     delay_us                                51
     DS18B20_Reset                           43
     ?Subroutine0                             2
     ??Subroutine8_0                          5
     OneWire_WriteByte                       35
     ?Subroutine6                            11
     ?Subroutine4                            13
     OneWire_ReadByte                        44
     DS18B20_GetTemperature                 138
     ?Subroutine1                             5
     ReadlightData                           25
     UartSendString                          47
     SampleApp_Init                         176
     SampleApp_ProcessEvent                 460
     ?Subroutine5                            14
     ?Subroutine3                            24
     SampleApp_HandleKeys                    13
     ?Subroutine2                             5
     SampleApp_MessageMSGCB                 280
     ?Subroutine7                            12
     SampleApp_SendPeriodicMessage            3
     SampleApp_SendFlashMessage             121
     SampleApp_SerialCMD                      3
     ?<Initializer for temp1>                 6
     ?<Initializer for temp2>                 5
     ??delay_us?relay                         6
     ??DS18B20_Reset?relay                    6
     ??OneWire_WriteByte?relay                6
     ??OneWire_ReadByte?relay                 6
     ??DS18B20_GetTemperature?relay           6
     ??ReadlightData?relay                    6
     ??UartSendString?relay                   6
     ??SampleApp_Init?relay                   6
     ??SampleApp_ProcessEvent?relay           6
     ??SampleApp_HandleKeys?relay             6
     ??SampleApp_MessageMSGCB?relay           6
     ??SampleApp_SendPeriodicMessage?relay    6
     ??SampleApp_SendFlashMessage?relay       6
     ??SampleApp_SerialCMD?relay              6
     ?<Constant "Group 1">                    8
     ?<Constant "ERROR">                      6
     ?<Constant "%d.%01d">                    8
     ?<Constant "%d">                         3
     ?<Constant "soilHumidity: %.2f%%\n">    22
     __Constant_40c80000                      4
     __Constant_42700000                      4

 
 1 530 bytes in segment BANKED_CODE
    84 bytes in segment BANK_RELAYS
    13 bytes in segment SFR_AN
    11 bytes in segment XDATA_I
    11 bytes in segment XDATA_ID
    71 bytes in segment XDATA_ROM_C
    61 bytes in segment XDATA_Z
 
 1 625 bytes of CODE  memory
    63 bytes of CONST memory (+  8 bytes shared)
     0 bytes of DATA  memory (+ 13 bytes shared)
    72 bytes of XDATA memory

Errors: none
Warnings: 6
